//#line 2 "/opt/ros/kinetic/share/dynamic_reconfigure/cmake/../templates/ConfigType.h.template"
// *********************************************************
//
// File autogenerated for the caros_camera package
// by the dynamic_reconfigure package.
// Please do not edit.
//
// ********************************************************/

#ifndef __caros_camera__BASLERCONFIG_H__
#define __caros_camera__BASLERCONFIG_H__

#include <dynamic_reconfigure/config_tools.h>
#include <limits>
#include <ros/node_handle.h>
#include <dynamic_reconfigure/ConfigDescription.h>
#include <dynamic_reconfigure/ParamDescription.h>
#include <dynamic_reconfigure/Group.h>
#include <dynamic_reconfigure/config_init_mutex.h>
#include <boost/any.hpp>

namespace caros_camera
{
  class BaslerConfigStatics;

  class BaslerConfig
  {
  public:
    class AbstractParamDescription : public dynamic_reconfigure::ParamDescription
    {
    public:
      AbstractParamDescription(std::string n, std::string t, uint32_t l,
          std::string d, std::string e)
      {
        name = n;
        type = t;
        level = l;
        description = d;
        edit_method = e;
      }

      virtual void clamp(BaslerConfig &config, const BaslerConfig &max, const BaslerConfig &min) const = 0;
      virtual void calcLevel(uint32_t &level, const BaslerConfig &config1, const BaslerConfig &config2) const = 0;
      virtual void fromServer(const ros::NodeHandle &nh, BaslerConfig &config) const = 0;
      virtual void toServer(const ros::NodeHandle &nh, const BaslerConfig &config) const = 0;
      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, BaslerConfig &config) const = 0;
      virtual void toMessage(dynamic_reconfigure::Config &msg, const BaslerConfig &config) const = 0;
      virtual void getValue(const BaslerConfig &config, boost::any &val) const = 0;
    };

    typedef boost::shared_ptr<AbstractParamDescription> AbstractParamDescriptionPtr;
    typedef boost::shared_ptr<const AbstractParamDescription> AbstractParamDescriptionConstPtr;

    template <class T>
    class ParamDescription : public AbstractParamDescription
    {
    public:
      ParamDescription(std::string a_name, std::string a_type, uint32_t a_level,
          std::string a_description, std::string a_edit_method, T BaslerConfig::* a_f) :
        AbstractParamDescription(a_name, a_type, a_level, a_description, a_edit_method),
        field(a_f)
      {}

      T (BaslerConfig::* field);

      virtual void clamp(BaslerConfig &config, const BaslerConfig &max, const BaslerConfig &min) const
      {
        if (config.*field > max.*field)
          config.*field = max.*field;

        if (config.*field < min.*field)
          config.*field = min.*field;
      }

      virtual void calcLevel(uint32_t &comb_level, const BaslerConfig &config1, const BaslerConfig &config2) const
      {
        if (config1.*field != config2.*field)
          comb_level |= level;
      }

      virtual void fromServer(const ros::NodeHandle &nh, BaslerConfig &config) const
      {
        nh.getParam(name, config.*field);
      }

      virtual void toServer(const ros::NodeHandle &nh, const BaslerConfig &config) const
      {
        nh.setParam(name, config.*field);
      }

      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, BaslerConfig &config) const
      {
        return dynamic_reconfigure::ConfigTools::getParameter(msg, name, config.*field);
      }

      virtual void toMessage(dynamic_reconfigure::Config &msg, const BaslerConfig &config) const
      {
        dynamic_reconfigure::ConfigTools::appendParameter(msg, name, config.*field);
      }

      virtual void getValue(const BaslerConfig &config, boost::any &val) const
      {
        val = config.*field;
      }
    };

    class AbstractGroupDescription : public dynamic_reconfigure::Group
    {
      public:
      AbstractGroupDescription(std::string n, std::string t, int p, int i, bool s)
      {
        name = n;
        type = t;
        parent = p;
        state = s;
        id = i;
      }

      std::vector<AbstractParamDescriptionConstPtr> abstract_parameters;
      bool state;

      virtual void toMessage(dynamic_reconfigure::Config &msg, const boost::any &config) const = 0;
      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, boost::any &config) const =0;
      virtual void updateParams(boost::any &cfg, BaslerConfig &top) const= 0;
      virtual void setInitialState(boost::any &cfg) const = 0;


      void convertParams()
      {
        for(std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = abstract_parameters.begin(); i != abstract_parameters.end(); ++i)
        {
          parameters.push_back(dynamic_reconfigure::ParamDescription(**i));
        }
      }
    };

    typedef boost::shared_ptr<AbstractGroupDescription> AbstractGroupDescriptionPtr;
    typedef boost::shared_ptr<const AbstractGroupDescription> AbstractGroupDescriptionConstPtr;

    template<class T, class PT>
    class GroupDescription : public AbstractGroupDescription
    {
    public:
      GroupDescription(std::string a_name, std::string a_type, int a_parent, int a_id, bool a_s, T PT::* a_f) : AbstractGroupDescription(a_name, a_type, a_parent, a_id, a_s), field(a_f)
      {
      }

      GroupDescription(const GroupDescription<T, PT>& g): AbstractGroupDescription(g.name, g.type, g.parent, g.id, g.state), field(g.field), groups(g.groups)
      {
        parameters = g.parameters;
        abstract_parameters = g.abstract_parameters;
      }

      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, boost::any &cfg) const
      {
        PT* config = boost::any_cast<PT*>(cfg);
        if(!dynamic_reconfigure::ConfigTools::getGroupState(msg, name, (*config).*field))
          return false;

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          boost::any n = &((*config).*field);
          if(!(*i)->fromMessage(msg, n))
            return false;
        }

        return true;
      }

      virtual void setInitialState(boost::any &cfg) const
      {
        PT* config = boost::any_cast<PT*>(cfg);
        T* group = &((*config).*field);
        group->state = state;

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          boost::any n = boost::any(&((*config).*field));
          (*i)->setInitialState(n);
        }

      }

      virtual void updateParams(boost::any &cfg, BaslerConfig &top) const
      {
        PT* config = boost::any_cast<PT*>(cfg);

        T* f = &((*config).*field);
        f->setParams(top, abstract_parameters);

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          boost::any n = &((*config).*field);
          (*i)->updateParams(n, top);
        }
      }

      virtual void toMessage(dynamic_reconfigure::Config &msg, const boost::any &cfg) const
      {
        const PT config = boost::any_cast<PT>(cfg);
        dynamic_reconfigure::ConfigTools::appendGroup<T>(msg, name, id, parent, config.*field);

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          (*i)->toMessage(msg, config.*field);
        }
      }

      T (PT::* field);
      std::vector<BaslerConfig::AbstractGroupDescriptionConstPtr> groups;
    };

class DEFAULT
{
  public:
    DEFAULT()
    {
      state = true;
      name = "Default";
    }

    void setParams(BaslerConfig &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);


      }
    }

    

    bool state;
    std::string name;

    class CAPTURE
{
  public:
    CAPTURE()
    {
      state = true;
      name = "Capture";
    }

    void setParams(BaslerConfig &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);

        if("PixelFormat"==(*_i)->name){PixelFormat = boost::any_cast<std::string>(val);}
        if("ExposureAuto"==(*_i)->name){ExposureAuto = boost::any_cast<std::string>(val);}
        if("GainAuto"==(*_i)->name){GainAuto = boost::any_cast<std::string>(val);}
        if("BalanceWhiteAuto"==(*_i)->name){BalanceWhiteAuto = boost::any_cast<std::string>(val);}
        if("GainRaw"==(*_i)->name){GainRaw = boost::any_cast<int>(val);}
        if("ExposureTimeRaw"==(*_i)->name){ExposureTimeRaw = boost::any_cast<int>(val);}
        if("BlackLevelRaw"==(*_i)->name){BlackLevelRaw = boost::any_cast<int>(val);}
        if("GammaEnable"==(*_i)->name){GammaEnable = boost::any_cast<bool>(val);}
        if("Gamma"==(*_i)->name){Gamma = boost::any_cast<double>(val);}
        if("AcquisitionFrameRateEnable"==(*_i)->name){AcquisitionFrameRateEnable = boost::any_cast<bool>(val);}
        if("AcquisitionFrameRateAbs"==(*_i)->name){AcquisitionFrameRateAbs = boost::any_cast<double>(val);}
      }
    }

    std::string PixelFormat;
std::string ExposureAuto;
std::string GainAuto;
std::string BalanceWhiteAuto;
int GainRaw;
int ExposureTimeRaw;
int BlackLevelRaw;
bool GammaEnable;
double Gamma;
bool AcquisitionFrameRateEnable;
double AcquisitionFrameRateAbs;

    bool state;
    std::string name;

    
}capture;

class AOI_CONTROLS
{
  public:
    AOI_CONTROLS()
    {
      state = true;
      name = "AOI_Controls";
    }

    void setParams(BaslerConfig &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);

        if("Width"==(*_i)->name){Width = boost::any_cast<int>(val);}
        if("Height"==(*_i)->name){Height = boost::any_cast<int>(val);}
        if("AutoFunctionAOIWidth"==(*_i)->name){AutoFunctionAOIWidth = boost::any_cast<int>(val);}
        if("AutoFunctionAOIHeight"==(*_i)->name){AutoFunctionAOIHeight = boost::any_cast<int>(val);}
      }
    }

    int Width;
int Height;
int AutoFunctionAOIWidth;
int AutoFunctionAOIHeight;

    bool state;
    std::string name;

    
}aoi_controls;

class TRANSMISSION
{
  public:
    TRANSMISSION()
    {
      state = true;
      name = "Transmission";
    }

    void setParams(BaslerConfig &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);

        if("GevSCPSPacketSize"==(*_i)->name){GevSCPSPacketSize = boost::any_cast<std::string>(val);}
        if("GevSCPD"==(*_i)->name){GevSCPD = boost::any_cast<std::string>(val);}
      }
    }

    std::string GevSCPSPacketSize;
std::string GevSCPD;

    bool state;
    std::string name;

    
}transmission;

}groups;



//#line 14 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Basler.cfg"
      std::string PixelFormat;
//#line 21 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Basler.cfg"
      std::string ExposureAuto;
//#line 28 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Basler.cfg"
      std::string GainAuto;
//#line 35 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Basler.cfg"
      std::string BalanceWhiteAuto;
//#line 38 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Basler.cfg"
      int GainRaw;
//#line 41 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Basler.cfg"
      int ExposureTimeRaw;
//#line 44 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Basler.cfg"
      int BlackLevelRaw;
//#line 47 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Basler.cfg"
      bool GammaEnable;
//#line 50 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Basler.cfg"
      double Gamma;
//#line 54 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Basler.cfg"
      bool AcquisitionFrameRateEnable;
//#line 57 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Basler.cfg"
      double AcquisitionFrameRateAbs;
//#line 63 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Basler.cfg"
      int Width;
//#line 65 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Basler.cfg"
      int Height;
//#line 67 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Basler.cfg"
      int AutoFunctionAOIWidth;
//#line 69 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Basler.cfg"
      int AutoFunctionAOIHeight;
//#line 73 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Basler.cfg"
      std::string GevSCPSPacketSize;
//#line 74 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Basler.cfg"
      std::string GevSCPD;
//#line 218 "/opt/ros/kinetic/share/dynamic_reconfigure/cmake/../templates/ConfigType.h.template"

    bool __fromMessage__(dynamic_reconfigure::Config &msg)
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__ = __getGroupDescriptions__();

      int count = 0;
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        if ((*i)->fromMessage(msg, *this))
          count++;

      for (std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); i ++)
      {
        if ((*i)->id == 0)
        {
          boost::any n = boost::any(this);
          (*i)->updateParams(n, *this);
          (*i)->fromMessage(msg, n);
        }
      }

      if (count != dynamic_reconfigure::ConfigTools::size(msg))
      {
        ROS_ERROR("BaslerConfig::__fromMessage__ called with an unexpected parameter.");
        ROS_ERROR("Booleans:");
        for (unsigned int i = 0; i < msg.bools.size(); i++)
          ROS_ERROR("  %s", msg.bools[i].name.c_str());
        ROS_ERROR("Integers:");
        for (unsigned int i = 0; i < msg.ints.size(); i++)
          ROS_ERROR("  %s", msg.ints[i].name.c_str());
        ROS_ERROR("Doubles:");
        for (unsigned int i = 0; i < msg.doubles.size(); i++)
          ROS_ERROR("  %s", msg.doubles[i].name.c_str());
        ROS_ERROR("Strings:");
        for (unsigned int i = 0; i < msg.strs.size(); i++)
          ROS_ERROR("  %s", msg.strs[i].name.c_str());
        // @todo Check that there are no duplicates. Make this error more
        // explicit.
        return false;
      }
      return true;
    }

    // This version of __toMessage__ is used during initialization of
    // statics when __getParamDescriptions__ can't be called yet.
    void __toMessage__(dynamic_reconfigure::Config &msg, const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__, const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__) const
    {
      dynamic_reconfigure::ConfigTools::clear(msg);
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->toMessage(msg, *this);

      for (std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); ++i)
      {
        if((*i)->id == 0)
        {
          (*i)->toMessage(msg, *this);
        }
      }
    }

    void __toMessage__(dynamic_reconfigure::Config &msg) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__ = __getGroupDescriptions__();
      __toMessage__(msg, __param_descriptions__, __group_descriptions__);
    }

    void __toServer__(const ros::NodeHandle &nh) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->toServer(nh, *this);
    }

    void __fromServer__(const ros::NodeHandle &nh)
    {
      static bool setup=false;

      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->fromServer(nh, *this);

      const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__ = __getGroupDescriptions__();
      for (std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); i++){
        if (!setup && (*i)->id == 0) {
          setup = true;
          boost::any n = boost::any(this);
          (*i)->setInitialState(n);
        }
      }
    }

    void __clamp__()
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const BaslerConfig &__max__ = __getMax__();
      const BaslerConfig &__min__ = __getMin__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->clamp(*this, __max__, __min__);
    }

    uint32_t __level__(const BaslerConfig &config) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      uint32_t level = 0;
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->calcLevel(level, config, *this);
      return level;
    }

    static const dynamic_reconfigure::ConfigDescription &__getDescriptionMessage__();
    static const BaslerConfig &__getDefault__();
    static const BaslerConfig &__getMax__();
    static const BaslerConfig &__getMin__();
    static const std::vector<AbstractParamDescriptionConstPtr> &__getParamDescriptions__();
    static const std::vector<AbstractGroupDescriptionConstPtr> &__getGroupDescriptions__();

  private:
    static const BaslerConfigStatics *__get_statics__();
  };

  template <> // Max and min are ignored for strings.
  inline void BaslerConfig::ParamDescription<std::string>::clamp(BaslerConfig &config, const BaslerConfig &max, const BaslerConfig &min) const
  {
    (void) config;
    (void) min;
    (void) max;
    return;
  }

  class BaslerConfigStatics
  {
    friend class BaslerConfig;

    BaslerConfigStatics()
    {
BaslerConfig::GroupDescription<BaslerConfig::DEFAULT, BaslerConfig> Default("Default", "", 0, 0, true, &BaslerConfig::groups);
BaslerConfig::GroupDescription<BaslerConfig::DEFAULT::CAPTURE, BaslerConfig::DEFAULT> Capture("Capture", "", 0, 1, true, &BaslerConfig::DEFAULT::capture);
//#line 14 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Basler.cfg"
      __min__.PixelFormat = "";
//#line 14 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Basler.cfg"
      __max__.PixelFormat = "";
//#line 14 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Basler.cfg"
      __default__.PixelFormat = "BayerRG8";
//#line 14 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Basler.cfg"
      Capture.abstract_parameters.push_back(BaslerConfig::AbstractParamDescriptionConstPtr(new BaslerConfig::ParamDescription<std::string>("PixelFormat", "str", 0, "Pixel format", "{'enum_description': 'Pixel format', 'enum': [{'srcline': 10, 'description': '', 'srcfile': '/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Basler.cfg', 'cconsttype': 'const char * const', 'value': 'BayerRG8', 'ctype': 'std::string', 'type': 'str', 'name': 'BayerRG8'}, {'srcline': 11, 'description': '', 'srcfile': '/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Basler.cfg', 'cconsttype': 'const char * const', 'value': 'Mono8', 'ctype': 'std::string', 'type': 'str', 'name': 'Mono8'}]}", &BaslerConfig::PixelFormat)));
//#line 14 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Basler.cfg"
      __param_descriptions__.push_back(BaslerConfig::AbstractParamDescriptionConstPtr(new BaslerConfig::ParamDescription<std::string>("PixelFormat", "str", 0, "Pixel format", "{'enum_description': 'Pixel format', 'enum': [{'srcline': 10, 'description': '', 'srcfile': '/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Basler.cfg', 'cconsttype': 'const char * const', 'value': 'BayerRG8', 'ctype': 'std::string', 'type': 'str', 'name': 'BayerRG8'}, {'srcline': 11, 'description': '', 'srcfile': '/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Basler.cfg', 'cconsttype': 'const char * const', 'value': 'Mono8', 'ctype': 'std::string', 'type': 'str', 'name': 'Mono8'}]}", &BaslerConfig::PixelFormat)));
//#line 21 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Basler.cfg"
      __min__.ExposureAuto = "";
//#line 21 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Basler.cfg"
      __max__.ExposureAuto = "";
//#line 21 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Basler.cfg"
      __default__.ExposureAuto = "Continuous";
//#line 21 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Basler.cfg"
      Capture.abstract_parameters.push_back(BaslerConfig::AbstractParamDescriptionConstPtr(new BaslerConfig::ParamDescription<std::string>("ExposureAuto", "str", 0, "Exposure setting", "{'enum_description': 'Exposure setting', 'enum': [{'srcline': 16, 'description': '', 'srcfile': '/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Basler.cfg', 'cconsttype': 'const char * const', 'value': 'Continuous', 'ctype': 'std::string', 'type': 'str', 'name': 'ExposureContinuous'}, {'srcline': 17, 'description': '', 'srcfile': '/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Basler.cfg', 'cconsttype': 'const char * const', 'value': 'Once', 'ctype': 'std::string', 'type': 'str', 'name': 'ExposureOnce'}, {'srcline': 18, 'description': '', 'srcfile': '/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Basler.cfg', 'cconsttype': 'const char * const', 'value': 'Off', 'ctype': 'std::string', 'type': 'str', 'name': 'ExposureOff'}]}", &BaslerConfig::ExposureAuto)));
//#line 21 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Basler.cfg"
      __param_descriptions__.push_back(BaslerConfig::AbstractParamDescriptionConstPtr(new BaslerConfig::ParamDescription<std::string>("ExposureAuto", "str", 0, "Exposure setting", "{'enum_description': 'Exposure setting', 'enum': [{'srcline': 16, 'description': '', 'srcfile': '/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Basler.cfg', 'cconsttype': 'const char * const', 'value': 'Continuous', 'ctype': 'std::string', 'type': 'str', 'name': 'ExposureContinuous'}, {'srcline': 17, 'description': '', 'srcfile': '/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Basler.cfg', 'cconsttype': 'const char * const', 'value': 'Once', 'ctype': 'std::string', 'type': 'str', 'name': 'ExposureOnce'}, {'srcline': 18, 'description': '', 'srcfile': '/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Basler.cfg', 'cconsttype': 'const char * const', 'value': 'Off', 'ctype': 'std::string', 'type': 'str', 'name': 'ExposureOff'}]}", &BaslerConfig::ExposureAuto)));
//#line 28 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Basler.cfg"
      __min__.GainAuto = "";
//#line 28 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Basler.cfg"
      __max__.GainAuto = "";
//#line 28 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Basler.cfg"
      __default__.GainAuto = "Continuous";
//#line 28 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Basler.cfg"
      Capture.abstract_parameters.push_back(BaslerConfig::AbstractParamDescriptionConstPtr(new BaslerConfig::ParamDescription<std::string>("GainAuto", "str", 0, "Gain setting", "{'enum_description': 'Gain setting', 'enum': [{'srcline': 23, 'description': '', 'srcfile': '/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Basler.cfg', 'cconsttype': 'const char * const', 'value': 'Continuous', 'ctype': 'std::string', 'type': 'str', 'name': 'GainContinuous'}, {'srcline': 24, 'description': '', 'srcfile': '/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Basler.cfg', 'cconsttype': 'const char * const', 'value': 'Once', 'ctype': 'std::string', 'type': 'str', 'name': 'GainOnce'}, {'srcline': 25, 'description': '', 'srcfile': '/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Basler.cfg', 'cconsttype': 'const char * const', 'value': 'Off', 'ctype': 'std::string', 'type': 'str', 'name': 'GainOff'}]}", &BaslerConfig::GainAuto)));
//#line 28 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Basler.cfg"
      __param_descriptions__.push_back(BaslerConfig::AbstractParamDescriptionConstPtr(new BaslerConfig::ParamDescription<std::string>("GainAuto", "str", 0, "Gain setting", "{'enum_description': 'Gain setting', 'enum': [{'srcline': 23, 'description': '', 'srcfile': '/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Basler.cfg', 'cconsttype': 'const char * const', 'value': 'Continuous', 'ctype': 'std::string', 'type': 'str', 'name': 'GainContinuous'}, {'srcline': 24, 'description': '', 'srcfile': '/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Basler.cfg', 'cconsttype': 'const char * const', 'value': 'Once', 'ctype': 'std::string', 'type': 'str', 'name': 'GainOnce'}, {'srcline': 25, 'description': '', 'srcfile': '/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Basler.cfg', 'cconsttype': 'const char * const', 'value': 'Off', 'ctype': 'std::string', 'type': 'str', 'name': 'GainOff'}]}", &BaslerConfig::GainAuto)));
//#line 35 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Basler.cfg"
      __min__.BalanceWhiteAuto = "";
//#line 35 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Basler.cfg"
      __max__.BalanceWhiteAuto = "";
//#line 35 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Basler.cfg"
      __default__.BalanceWhiteAuto = "Continuous";
//#line 35 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Basler.cfg"
      Capture.abstract_parameters.push_back(BaslerConfig::AbstractParamDescriptionConstPtr(new BaslerConfig::ParamDescription<std::string>("BalanceWhiteAuto", "str", 0, "Balance white setting", "{'enum_description': 'Balance white setting', 'enum': [{'srcline': 30, 'description': '', 'srcfile': '/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Basler.cfg', 'cconsttype': 'const char * const', 'value': 'Continuous', 'ctype': 'std::string', 'type': 'str', 'name': 'BalanceWhiteContinuous'}, {'srcline': 31, 'description': '', 'srcfile': '/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Basler.cfg', 'cconsttype': 'const char * const', 'value': 'Once', 'ctype': 'std::string', 'type': 'str', 'name': 'BalanceWhiteOnce'}, {'srcline': 32, 'description': '', 'srcfile': '/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Basler.cfg', 'cconsttype': 'const char * const', 'value': 'Off', 'ctype': 'std::string', 'type': 'str', 'name': 'BalanceWhiteOff'}]}", &BaslerConfig::BalanceWhiteAuto)));
//#line 35 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Basler.cfg"
      __param_descriptions__.push_back(BaslerConfig::AbstractParamDescriptionConstPtr(new BaslerConfig::ParamDescription<std::string>("BalanceWhiteAuto", "str", 0, "Balance white setting", "{'enum_description': 'Balance white setting', 'enum': [{'srcline': 30, 'description': '', 'srcfile': '/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Basler.cfg', 'cconsttype': 'const char * const', 'value': 'Continuous', 'ctype': 'std::string', 'type': 'str', 'name': 'BalanceWhiteContinuous'}, {'srcline': 31, 'description': '', 'srcfile': '/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Basler.cfg', 'cconsttype': 'const char * const', 'value': 'Once', 'ctype': 'std::string', 'type': 'str', 'name': 'BalanceWhiteOnce'}, {'srcline': 32, 'description': '', 'srcfile': '/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Basler.cfg', 'cconsttype': 'const char * const', 'value': 'Off', 'ctype': 'std::string', 'type': 'str', 'name': 'BalanceWhiteOff'}]}", &BaslerConfig::BalanceWhiteAuto)));
//#line 38 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Basler.cfg"
      __min__.GainRaw = 1;
//#line 38 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Basler.cfg"
      __max__.GainRaw = 3;
//#line 38 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Basler.cfg"
      __default__.GainRaw = 1;
//#line 38 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Basler.cfg"
      Capture.abstract_parameters.push_back(BaslerConfig::AbstractParamDescriptionConstPtr(new BaslerConfig::ParamDescription<int>("GainRaw", "int", 0, "A positive integer specifying the gain factor.", "", &BaslerConfig::GainRaw)));
//#line 38 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Basler.cfg"
      __param_descriptions__.push_back(BaslerConfig::AbstractParamDescriptionConstPtr(new BaslerConfig::ParamDescription<int>("GainRaw", "int", 0, "A positive integer specifying the gain factor.", "", &BaslerConfig::GainRaw)));
//#line 41 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Basler.cfg"
      __min__.ExposureTimeRaw = 10;
//#line 41 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Basler.cfg"
      __max__.ExposureTimeRaw = 916000;
//#line 41 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Basler.cfg"
      __default__.ExposureTimeRaw = 10000;
//#line 41 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Basler.cfg"
      Capture.abstract_parameters.push_back(BaslerConfig::AbstractParamDescriptionConstPtr(new BaslerConfig::ParamDescription<int>("ExposureTimeRaw", "int", 0, "Sets the camera's exposure time in microseconds", "", &BaslerConfig::ExposureTimeRaw)));
//#line 41 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Basler.cfg"
      __param_descriptions__.push_back(BaslerConfig::AbstractParamDescriptionConstPtr(new BaslerConfig::ParamDescription<int>("ExposureTimeRaw", "int", 0, "Sets the camera's exposure time in microseconds", "", &BaslerConfig::ExposureTimeRaw)));
//#line 44 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Basler.cfg"
      __min__.BlackLevelRaw = -128;
//#line 44 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Basler.cfg"
      __max__.BlackLevelRaw = 127;
//#line 44 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Basler.cfg"
      __default__.BlackLevelRaw = 0;
//#line 44 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Basler.cfg"
      Capture.abstract_parameters.push_back(BaslerConfig::AbstractParamDescriptionConstPtr(new BaslerConfig::ParamDescription<int>("BlackLevelRaw", "int", 0, "This boolean value enables the gamma correction", "", &BaslerConfig::BlackLevelRaw)));
//#line 44 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Basler.cfg"
      __param_descriptions__.push_back(BaslerConfig::AbstractParamDescriptionConstPtr(new BaslerConfig::ParamDescription<int>("BlackLevelRaw", "int", 0, "This boolean value enables the gamma correction", "", &BaslerConfig::BlackLevelRaw)));
//#line 47 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Basler.cfg"
      __min__.GammaEnable = 0;
//#line 47 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Basler.cfg"
      __max__.GammaEnable = 1;
//#line 47 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Basler.cfg"
      __default__.GammaEnable = 0;
//#line 47 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Basler.cfg"
      Capture.abstract_parameters.push_back(BaslerConfig::AbstractParamDescriptionConstPtr(new BaslerConfig::ParamDescription<bool>("GammaEnable", "bool", 0, "This boolean value enables the gamma correction", "", &BaslerConfig::GammaEnable)));
//#line 47 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Basler.cfg"
      __param_descriptions__.push_back(BaslerConfig::AbstractParamDescriptionConstPtr(new BaslerConfig::ParamDescription<bool>("GammaEnable", "bool", 0, "This boolean value enables the gamma correction", "", &BaslerConfig::GammaEnable)));
//#line 50 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Basler.cfg"
      __min__.Gamma = 0.0;
//#line 50 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Basler.cfg"
      __max__.Gamma = 3.99999;
//#line 50 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Basler.cfg"
      __default__.Gamma = 1.0;
//#line 50 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Basler.cfg"
      Capture.abstract_parameters.push_back(BaslerConfig::AbstractParamDescriptionConstPtr(new BaslerConfig::ParamDescription<double>("Gamma", "double", 0, "Sets the 'absolute' value of the acquisition frame rate. The 'absolute' value is a float value that sets the acquisition frame rate in frames per second.", "", &BaslerConfig::Gamma)));
//#line 50 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Basler.cfg"
      __param_descriptions__.push_back(BaslerConfig::AbstractParamDescriptionConstPtr(new BaslerConfig::ParamDescription<double>("Gamma", "double", 0, "Sets the 'absolute' value of the acquisition frame rate. The 'absolute' value is a float value that sets the acquisition frame rate in frames per second.", "", &BaslerConfig::Gamma)));
//#line 54 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Basler.cfg"
      __min__.AcquisitionFrameRateEnable = 0;
//#line 54 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Basler.cfg"
      __max__.AcquisitionFrameRateEnable = 1;
//#line 54 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Basler.cfg"
      __default__.AcquisitionFrameRateEnable = 0;
//#line 54 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Basler.cfg"
      Capture.abstract_parameters.push_back(BaslerConfig::AbstractParamDescriptionConstPtr(new BaslerConfig::ParamDescription<bool>("AcquisitionFrameRateEnable", "bool", 0, "This boolean value enables setting the camera's acquisition frame rate to a specified value.", "", &BaslerConfig::AcquisitionFrameRateEnable)));
//#line 54 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Basler.cfg"
      __param_descriptions__.push_back(BaslerConfig::AbstractParamDescriptionConstPtr(new BaslerConfig::ParamDescription<bool>("AcquisitionFrameRateEnable", "bool", 0, "This boolean value enables setting the camera's acquisition frame rate to a specified value.", "", &BaslerConfig::AcquisitionFrameRateEnable)));
//#line 57 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Basler.cfg"
      __min__.AcquisitionFrameRateAbs = 0.000466;
//#line 57 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Basler.cfg"
      __max__.AcquisitionFrameRateAbs = 1000.0;
//#line 57 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Basler.cfg"
      __default__.AcquisitionFrameRateAbs = 10.0;
//#line 57 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Basler.cfg"
      Capture.abstract_parameters.push_back(BaslerConfig::AbstractParamDescriptionConstPtr(new BaslerConfig::ParamDescription<double>("AcquisitionFrameRateAbs", "double", 0, "Sets the 'absolute' value of the acquisition frame rate. The 'absolute' value is a float value that sets the acquisition frame rate in frames per second.", "", &BaslerConfig::AcquisitionFrameRateAbs)));
//#line 57 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Basler.cfg"
      __param_descriptions__.push_back(BaslerConfig::AbstractParamDescriptionConstPtr(new BaslerConfig::ParamDescription<double>("AcquisitionFrameRateAbs", "double", 0, "Sets the 'absolute' value of the acquisition frame rate. The 'absolute' value is a float value that sets the acquisition frame rate in frames per second.", "", &BaslerConfig::AcquisitionFrameRateAbs)));
//#line 124 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Capture.convertParams();
//#line 124 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.groups.push_back(BaslerConfig::AbstractGroupDescriptionConstPtr(new BaslerConfig::GroupDescription<BaslerConfig::DEFAULT::CAPTURE, BaslerConfig::DEFAULT>(Capture)));
//#line 124 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __group_descriptions__.push_back(BaslerConfig::AbstractGroupDescriptionConstPtr(new BaslerConfig::GroupDescription<BaslerConfig::DEFAULT::CAPTURE, BaslerConfig::DEFAULT>(Capture)));
BaslerConfig::GroupDescription<BaslerConfig::DEFAULT::AOI_CONTROLS, BaslerConfig::DEFAULT> AOI_Controls("AOI_Controls", "", 0, 2, true, &BaslerConfig::DEFAULT::aoi_controls);
//#line 63 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Basler.cfg"
      __min__.Width = 16;
//#line 63 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Basler.cfg"
      __max__.Width = 1280;
//#line 63 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Basler.cfg"
      __default__.Width = 1280;
//#line 63 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Basler.cfg"
      AOI_Controls.abstract_parameters.push_back(BaslerConfig::AbstractParamDescriptionConstPtr(new BaslerConfig::ParamDescription<int>("Width", "int", 0, "This value sets the width of the area of interest in pixels.", "", &BaslerConfig::Width)));
//#line 63 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Basler.cfg"
      __param_descriptions__.push_back(BaslerConfig::AbstractParamDescriptionConstPtr(new BaslerConfig::ParamDescription<int>("Width", "int", 0, "This value sets the width of the area of interest in pixels.", "", &BaslerConfig::Width)));
//#line 65 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Basler.cfg"
      __min__.Height = 1;
//#line 65 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Basler.cfg"
      __max__.Height = 1024;
//#line 65 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Basler.cfg"
      __default__.Height = 1024;
//#line 65 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Basler.cfg"
      AOI_Controls.abstract_parameters.push_back(BaslerConfig::AbstractParamDescriptionConstPtr(new BaslerConfig::ParamDescription<int>("Height", "int", 0, "This value sets the height of the area of interest in pixels.", "", &BaslerConfig::Height)));
//#line 65 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Basler.cfg"
      __param_descriptions__.push_back(BaslerConfig::AbstractParamDescriptionConstPtr(new BaslerConfig::ParamDescription<int>("Height", "int", 0, "This value sets the height of the area of interest in pixels.", "", &BaslerConfig::Height)));
//#line 67 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Basler.cfg"
      __min__.AutoFunctionAOIWidth = 1;
//#line 67 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Basler.cfg"
      __max__.AutoFunctionAOIWidth = 1280;
//#line 67 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Basler.cfg"
      __default__.AutoFunctionAOIWidth = 1280;
//#line 67 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Basler.cfg"
      AOI_Controls.abstract_parameters.push_back(BaslerConfig::AbstractParamDescriptionConstPtr(new BaslerConfig::ParamDescription<int>("AutoFunctionAOIWidth", "int", 0, "This value sets the width of the auto function area of interest in pixels.", "", &BaslerConfig::AutoFunctionAOIWidth)));
//#line 67 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Basler.cfg"
      __param_descriptions__.push_back(BaslerConfig::AbstractParamDescriptionConstPtr(new BaslerConfig::ParamDescription<int>("AutoFunctionAOIWidth", "int", 0, "This value sets the width of the auto function area of interest in pixels.", "", &BaslerConfig::AutoFunctionAOIWidth)));
//#line 69 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Basler.cfg"
      __min__.AutoFunctionAOIHeight = 1;
//#line 69 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Basler.cfg"
      __max__.AutoFunctionAOIHeight = 1024;
//#line 69 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Basler.cfg"
      __default__.AutoFunctionAOIHeight = 1024;
//#line 69 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Basler.cfg"
      AOI_Controls.abstract_parameters.push_back(BaslerConfig::AbstractParamDescriptionConstPtr(new BaslerConfig::ParamDescription<int>("AutoFunctionAOIHeight", "int", 0, "This value sets the height of the auto function area of interest in pixels.", "", &BaslerConfig::AutoFunctionAOIHeight)));
//#line 69 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Basler.cfg"
      __param_descriptions__.push_back(BaslerConfig::AbstractParamDescriptionConstPtr(new BaslerConfig::ParamDescription<int>("AutoFunctionAOIHeight", "int", 0, "This value sets the height of the auto function area of interest in pixels.", "", &BaslerConfig::AutoFunctionAOIHeight)));
//#line 124 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      AOI_Controls.convertParams();
//#line 124 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.groups.push_back(BaslerConfig::AbstractGroupDescriptionConstPtr(new BaslerConfig::GroupDescription<BaslerConfig::DEFAULT::AOI_CONTROLS, BaslerConfig::DEFAULT>(AOI_Controls)));
//#line 124 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __group_descriptions__.push_back(BaslerConfig::AbstractGroupDescriptionConstPtr(new BaslerConfig::GroupDescription<BaslerConfig::DEFAULT::AOI_CONTROLS, BaslerConfig::DEFAULT>(AOI_Controls)));
BaslerConfig::GroupDescription<BaslerConfig::DEFAULT::TRANSMISSION, BaslerConfig::DEFAULT> Transmission("Transmission", "", 0, 3, true, &BaslerConfig::DEFAULT::transmission);
//#line 73 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Basler.cfg"
      __min__.GevSCPSPacketSize = "";
//#line 73 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Basler.cfg"
      __max__.GevSCPSPacketSize = "";
//#line 73 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Basler.cfg"
      __default__.GevSCPSPacketSize = "1500";
//#line 73 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Basler.cfg"
      Transmission.abstract_parameters.push_back(BaslerConfig::AbstractParamDescriptionConstPtr(new BaslerConfig::ParamDescription<std::string>("GevSCPSPacketSize", "str", 0, "Sets the packet size, must match the Maximum Transfer Unit (MTU) configured for the Network Adapter", "", &BaslerConfig::GevSCPSPacketSize)));
//#line 73 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Basler.cfg"
      __param_descriptions__.push_back(BaslerConfig::AbstractParamDescriptionConstPtr(new BaslerConfig::ParamDescription<std::string>("GevSCPSPacketSize", "str", 0, "Sets the packet size, must match the Maximum Transfer Unit (MTU) configured for the Network Adapter", "", &BaslerConfig::GevSCPSPacketSize)));
//#line 74 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Basler.cfg"
      __min__.GevSCPD = "";
//#line 74 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Basler.cfg"
      __max__.GevSCPD = "";
//#line 74 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Basler.cfg"
      __default__.GevSCPD = "100";
//#line 74 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Basler.cfg"
      Transmission.abstract_parameters.push_back(BaslerConfig::AbstractParamDescriptionConstPtr(new BaslerConfig::ParamDescription<std::string>("GevSCPD", "str", 0, "Sets the (Inter packet delay), increase this, if experiencing transmission errors", "", &BaslerConfig::GevSCPD)));
//#line 74 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Basler.cfg"
      __param_descriptions__.push_back(BaslerConfig::AbstractParamDescriptionConstPtr(new BaslerConfig::ParamDescription<std::string>("GevSCPD", "str", 0, "Sets the (Inter packet delay), increase this, if experiencing transmission errors", "", &BaslerConfig::GevSCPD)));
//#line 124 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Transmission.convertParams();
//#line 124 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.groups.push_back(BaslerConfig::AbstractGroupDescriptionConstPtr(new BaslerConfig::GroupDescription<BaslerConfig::DEFAULT::TRANSMISSION, BaslerConfig::DEFAULT>(Transmission)));
//#line 124 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __group_descriptions__.push_back(BaslerConfig::AbstractGroupDescriptionConstPtr(new BaslerConfig::GroupDescription<BaslerConfig::DEFAULT::TRANSMISSION, BaslerConfig::DEFAULT>(Transmission)));
//#line 245 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.convertParams();
//#line 245 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __group_descriptions__.push_back(BaslerConfig::AbstractGroupDescriptionConstPtr(new BaslerConfig::GroupDescription<BaslerConfig::DEFAULT, BaslerConfig>(Default)));
//#line 356 "/opt/ros/kinetic/share/dynamic_reconfigure/cmake/../templates/ConfigType.h.template"

      for (std::vector<BaslerConfig::AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); ++i)
      {
        __description_message__.groups.push_back(**i);
      }
      __max__.__toMessage__(__description_message__.max, __param_descriptions__, __group_descriptions__);
      __min__.__toMessage__(__description_message__.min, __param_descriptions__, __group_descriptions__);
      __default__.__toMessage__(__description_message__.dflt, __param_descriptions__, __group_descriptions__);
    }
    std::vector<BaslerConfig::AbstractParamDescriptionConstPtr> __param_descriptions__;
    std::vector<BaslerConfig::AbstractGroupDescriptionConstPtr> __group_descriptions__;
    BaslerConfig __max__;
    BaslerConfig __min__;
    BaslerConfig __default__;
    dynamic_reconfigure::ConfigDescription __description_message__;

    static const BaslerConfigStatics *get_instance()
    {
      // Split this off in a separate function because I know that
      // instance will get initialized the first time get_instance is
      // called, and I am guaranteeing that get_instance gets called at
      // most once.
      static BaslerConfigStatics instance;
      return &instance;
    }
  };

  inline const dynamic_reconfigure::ConfigDescription &BaslerConfig::__getDescriptionMessage__()
  {
    return __get_statics__()->__description_message__;
  }

  inline const BaslerConfig &BaslerConfig::__getDefault__()
  {
    return __get_statics__()->__default__;
  }

  inline const BaslerConfig &BaslerConfig::__getMax__()
  {
    return __get_statics__()->__max__;
  }

  inline const BaslerConfig &BaslerConfig::__getMin__()
  {
    return __get_statics__()->__min__;
  }

  inline const std::vector<BaslerConfig::AbstractParamDescriptionConstPtr> &BaslerConfig::__getParamDescriptions__()
  {
    return __get_statics__()->__param_descriptions__;
  }

  inline const std::vector<BaslerConfig::AbstractGroupDescriptionConstPtr> &BaslerConfig::__getGroupDescriptions__()
  {
    return __get_statics__()->__group_descriptions__;
  }

  inline const BaslerConfigStatics *BaslerConfig::__get_statics__()
  {
    const static BaslerConfigStatics *statics;

    if (statics) // Common case
      return statics;

    boost::mutex::scoped_lock lock(dynamic_reconfigure::__init_mutex__);

    if (statics) // In case we lost a race.
      return statics;

    statics = BaslerConfigStatics::get_instance();

    return statics;
  }

//#line 10 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Basler.cfg"
      const char * const Basler_BayerRG8 = "BayerRG8";
//#line 11 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Basler.cfg"
      const char * const Basler_Mono8 = "Mono8";
//#line 16 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Basler.cfg"
      const char * const Basler_ExposureContinuous = "Continuous";
//#line 17 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Basler.cfg"
      const char * const Basler_ExposureOnce = "Once";
//#line 18 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Basler.cfg"
      const char * const Basler_ExposureOff = "Off";
//#line 23 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Basler.cfg"
      const char * const Basler_GainContinuous = "Continuous";
//#line 24 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Basler.cfg"
      const char * const Basler_GainOnce = "Once";
//#line 25 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Basler.cfg"
      const char * const Basler_GainOff = "Off";
//#line 30 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Basler.cfg"
      const char * const Basler_BalanceWhiteContinuous = "Continuous";
//#line 31 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Basler.cfg"
      const char * const Basler_BalanceWhiteOnce = "Once";
//#line 32 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Basler.cfg"
      const char * const Basler_BalanceWhiteOff = "Off";
}

#endif // __BASLERRECONFIGURATOR_H__
