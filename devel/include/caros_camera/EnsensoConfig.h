//#line 2 "/opt/ros/kinetic/share/dynamic_reconfigure/cmake/../templates/ConfigType.h.template"
// *********************************************************
//
// File autogenerated for the caros_camera package
// by the dynamic_reconfigure package.
// Please do not edit.
//
// ********************************************************/

#ifndef __caros_camera__ENSENSOCONFIG_H__
#define __caros_camera__ENSENSOCONFIG_H__

#include <dynamic_reconfigure/config_tools.h>
#include <limits>
#include <ros/node_handle.h>
#include <dynamic_reconfigure/ConfigDescription.h>
#include <dynamic_reconfigure/ParamDescription.h>
#include <dynamic_reconfigure/Group.h>
#include <dynamic_reconfigure/config_init_mutex.h>
#include <boost/any.hpp>

namespace caros_camera
{
  class EnsensoConfigStatics;

  class EnsensoConfig
  {
  public:
    class AbstractParamDescription : public dynamic_reconfigure::ParamDescription
    {
    public:
      AbstractParamDescription(std::string n, std::string t, uint32_t l,
          std::string d, std::string e)
      {
        name = n;
        type = t;
        level = l;
        description = d;
        edit_method = e;
      }

      virtual void clamp(EnsensoConfig &config, const EnsensoConfig &max, const EnsensoConfig &min) const = 0;
      virtual void calcLevel(uint32_t &level, const EnsensoConfig &config1, const EnsensoConfig &config2) const = 0;
      virtual void fromServer(const ros::NodeHandle &nh, EnsensoConfig &config) const = 0;
      virtual void toServer(const ros::NodeHandle &nh, const EnsensoConfig &config) const = 0;
      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, EnsensoConfig &config) const = 0;
      virtual void toMessage(dynamic_reconfigure::Config &msg, const EnsensoConfig &config) const = 0;
      virtual void getValue(const EnsensoConfig &config, boost::any &val) const = 0;
    };

    typedef boost::shared_ptr<AbstractParamDescription> AbstractParamDescriptionPtr;
    typedef boost::shared_ptr<const AbstractParamDescription> AbstractParamDescriptionConstPtr;

    template <class T>
    class ParamDescription : public AbstractParamDescription
    {
    public:
      ParamDescription(std::string a_name, std::string a_type, uint32_t a_level,
          std::string a_description, std::string a_edit_method, T EnsensoConfig::* a_f) :
        AbstractParamDescription(a_name, a_type, a_level, a_description, a_edit_method),
        field(a_f)
      {}

      T (EnsensoConfig::* field);

      virtual void clamp(EnsensoConfig &config, const EnsensoConfig &max, const EnsensoConfig &min) const
      {
        if (config.*field > max.*field)
          config.*field = max.*field;

        if (config.*field < min.*field)
          config.*field = min.*field;
      }

      virtual void calcLevel(uint32_t &comb_level, const EnsensoConfig &config1, const EnsensoConfig &config2) const
      {
        if (config1.*field != config2.*field)
          comb_level |= level;
      }

      virtual void fromServer(const ros::NodeHandle &nh, EnsensoConfig &config) const
      {
        nh.getParam(name, config.*field);
      }

      virtual void toServer(const ros::NodeHandle &nh, const EnsensoConfig &config) const
      {
        nh.setParam(name, config.*field);
      }

      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, EnsensoConfig &config) const
      {
        return dynamic_reconfigure::ConfigTools::getParameter(msg, name, config.*field);
      }

      virtual void toMessage(dynamic_reconfigure::Config &msg, const EnsensoConfig &config) const
      {
        dynamic_reconfigure::ConfigTools::appendParameter(msg, name, config.*field);
      }

      virtual void getValue(const EnsensoConfig &config, boost::any &val) const
      {
        val = config.*field;
      }
    };

    class AbstractGroupDescription : public dynamic_reconfigure::Group
    {
      public:
      AbstractGroupDescription(std::string n, std::string t, int p, int i, bool s)
      {
        name = n;
        type = t;
        parent = p;
        state = s;
        id = i;
      }

      std::vector<AbstractParamDescriptionConstPtr> abstract_parameters;
      bool state;

      virtual void toMessage(dynamic_reconfigure::Config &msg, const boost::any &config) const = 0;
      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, boost::any &config) const =0;
      virtual void updateParams(boost::any &cfg, EnsensoConfig &top) const= 0;
      virtual void setInitialState(boost::any &cfg) const = 0;


      void convertParams()
      {
        for(std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = abstract_parameters.begin(); i != abstract_parameters.end(); ++i)
        {
          parameters.push_back(dynamic_reconfigure::ParamDescription(**i));
        }
      }
    };

    typedef boost::shared_ptr<AbstractGroupDescription> AbstractGroupDescriptionPtr;
    typedef boost::shared_ptr<const AbstractGroupDescription> AbstractGroupDescriptionConstPtr;

    template<class T, class PT>
    class GroupDescription : public AbstractGroupDescription
    {
    public:
      GroupDescription(std::string a_name, std::string a_type, int a_parent, int a_id, bool a_s, T PT::* a_f) : AbstractGroupDescription(a_name, a_type, a_parent, a_id, a_s), field(a_f)
      {
      }

      GroupDescription(const GroupDescription<T, PT>& g): AbstractGroupDescription(g.name, g.type, g.parent, g.id, g.state), field(g.field), groups(g.groups)
      {
        parameters = g.parameters;
        abstract_parameters = g.abstract_parameters;
      }

      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, boost::any &cfg) const
      {
        PT* config = boost::any_cast<PT*>(cfg);
        if(!dynamic_reconfigure::ConfigTools::getGroupState(msg, name, (*config).*field))
          return false;

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          boost::any n = &((*config).*field);
          if(!(*i)->fromMessage(msg, n))
            return false;
        }

        return true;
      }

      virtual void setInitialState(boost::any &cfg) const
      {
        PT* config = boost::any_cast<PT*>(cfg);
        T* group = &((*config).*field);
        group->state = state;

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          boost::any n = boost::any(&((*config).*field));
          (*i)->setInitialState(n);
        }

      }

      virtual void updateParams(boost::any &cfg, EnsensoConfig &top) const
      {
        PT* config = boost::any_cast<PT*>(cfg);

        T* f = &((*config).*field);
        f->setParams(top, abstract_parameters);

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          boost::any n = &((*config).*field);
          (*i)->updateParams(n, top);
        }
      }

      virtual void toMessage(dynamic_reconfigure::Config &msg, const boost::any &cfg) const
      {
        const PT config = boost::any_cast<PT>(cfg);
        dynamic_reconfigure::ConfigTools::appendGroup<T>(msg, name, id, parent, config.*field);

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          (*i)->toMessage(msg, config.*field);
        }
      }

      T (PT::* field);
      std::vector<EnsensoConfig::AbstractGroupDescriptionConstPtr> groups;
    };

class DEFAULT
{
  public:
    DEFAULT()
    {
      state = true;
      name = "Default";
    }

    void setParams(EnsensoConfig &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);


      }
    }

    

    bool state;
    std::string name;

    class CAPTURE
{
  public:
    CAPTURE()
    {
      state = true;
      name = "Capture";
    }

    void setParams(EnsensoConfig &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);

        if("AutoBlackLevel"==(*_i)->name){AutoBlackLevel = boost::any_cast<bool>(val);}
        if("AutoExposure"==(*_i)->name){AutoExposure = boost::any_cast<bool>(val);}
        if("AutoGain"==(*_i)->name){AutoGain = boost::any_cast<bool>(val);}
        if("Binning"==(*_i)->name){Binning = boost::any_cast<int>(val);}
        if("BlackLevelOffset"==(*_i)->name){BlackLevelOffset = boost::any_cast<double>(val);}
        if("DisparityMapAOI"==(*_i)->name){DisparityMapAOI = boost::any_cast<bool>(val);}
        if("Exposure"==(*_i)->name){Exposure = boost::any_cast<double>(val);}
        if("FrontLight"==(*_i)->name){FrontLight = boost::any_cast<bool>(val);}
        if("Gain"==(*_i)->name){Gain = boost::any_cast<double>(val);}
        if("GainBoost"==(*_i)->name){GainBoost = boost::any_cast<bool>(val);}
        if("HardwareGamma"==(*_i)->name){HardwareGamma = boost::any_cast<bool>(val);}
        if("HDR"==(*_i)->name){HDR = boost::any_cast<bool>(val);}
        if("PixelClock"==(*_i)->name){PixelClock = boost::any_cast<int>(val);}
        if("Projector"==(*_i)->name){Projector = boost::any_cast<bool>(val);}
        if("TargetBrightness"==(*_i)->name){TargetBrightness = boost::any_cast<int>(val);}
        if("TriggerMode"==(*_i)->name){TriggerMode = boost::any_cast<int>(val);}
      }
    }

    bool AutoBlackLevel;
bool AutoExposure;
bool AutoGain;
int Binning;
double BlackLevelOffset;
bool DisparityMapAOI;
double Exposure;
bool FrontLight;
double Gain;
bool GainBoost;
bool HardwareGamma;
bool HDR;
int PixelClock;
bool Projector;
int TargetBrightness;
int TriggerMode;

    bool state;
    std::string name;

    
}capture;

class STEREO
{
  public:
    STEREO()
    {
      state = true;
      name = "Stereo";
    }

    void setParams(EnsensoConfig &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);

        if("MinimumDisparity"==(*_i)->name){MinimumDisparity = boost::any_cast<int>(val);}
        if("NumberOfDisparities"==(*_i)->name){NumberOfDisparities = boost::any_cast<int>(val);}
        if("Scaling"==(*_i)->name){Scaling = boost::any_cast<double>(val);}
        if("OptimizationProfile"==(*_i)->name){OptimizationProfile = boost::any_cast<int>(val);}
        if("DepthChangeCost"==(*_i)->name){DepthChangeCost = boost::any_cast<int>(val);}
        if("DepthStepCost"==(*_i)->name){DepthStepCost = boost::any_cast<int>(val);}
        if("ShadowingThreshold"==(*_i)->name){ShadowingThreshold = boost::any_cast<int>(val);}
      }
    }

    int MinimumDisparity;
int NumberOfDisparities;
double Scaling;
int OptimizationProfile;
int DepthChangeCost;
int DepthStepCost;
int ShadowingThreshold;

    bool state;
    std::string name;

    
}stereo;

class POSTPROC
{
  public:
    POSTPROC()
    {
      state = true;
      name = "Postproc";
    }

    void setParams(EnsensoConfig &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);

        if("UniquenessRatio"==(*_i)->name){UniquenessRatio = boost::any_cast<int>(val);}
        if("MedianFilterRadius"==(*_i)->name){MedianFilterRadius = boost::any_cast<int>(val);}
        if("SpeckleComponentThreshold"==(*_i)->name){SpeckleComponentThreshold = boost::any_cast<int>(val);}
        if("SpeckleRegionSize"==(*_i)->name){SpeckleRegionSize = boost::any_cast<int>(val);}
        if("FillBorderSpread"==(*_i)->name){FillBorderSpread = boost::any_cast<int>(val);}
        if("FillRegionSize"==(*_i)->name){FillRegionSize = boost::any_cast<int>(val);}
      }
    }

    int UniquenessRatio;
int MedianFilterRadius;
int SpeckleComponentThreshold;
int SpeckleRegionSize;
int FillBorderSpread;
int FillRegionSize;

    bool state;
    std::string name;

    
}postproc;

class STREAM
{
  public:
    STREAM()
    {
      state = true;
      name = "Stream";
    }

    void setParams(EnsensoConfig &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);

        if("Cloud"==(*_i)->name){Cloud = boost::any_cast<bool>(val);}
        if("Images"==(*_i)->name){Images = boost::any_cast<bool>(val);}
      }
    }

    bool Cloud;
bool Images;

    bool state;
    std::string name;

    
}stream;

}groups;



//#line 11 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Ensenso.cfg"
      bool AutoBlackLevel;
//#line 13 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Ensenso.cfg"
      bool AutoExposure;
//#line 15 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Ensenso.cfg"
      bool AutoGain;
//#line 17 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Ensenso.cfg"
      int Binning;
//#line 19 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Ensenso.cfg"
      double BlackLevelOffset;
//#line 21 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Ensenso.cfg"
      bool DisparityMapAOI;
//#line 23 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Ensenso.cfg"
      double Exposure;
//#line 25 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Ensenso.cfg"
      bool FrontLight;
//#line 27 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Ensenso.cfg"
      double Gain;
//#line 29 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Ensenso.cfg"
      bool GainBoost;
//#line 31 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Ensenso.cfg"
      bool HardwareGamma;
//#line 33 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Ensenso.cfg"
      bool HDR;
//#line 35 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Ensenso.cfg"
      int PixelClock;
//#line 37 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Ensenso.cfg"
      bool Projector;
//#line 39 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Ensenso.cfg"
      int TargetBrightness;
//#line 46 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Ensenso.cfg"
      int TriggerMode;
//#line 51 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Ensenso.cfg"
      int MinimumDisparity;
//#line 53 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Ensenso.cfg"
      int NumberOfDisparities;
//#line 55 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Ensenso.cfg"
      double Scaling;
//#line 62 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Ensenso.cfg"
      int OptimizationProfile;
//#line 66 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Ensenso.cfg"
      int DepthChangeCost;
//#line 68 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Ensenso.cfg"
      int DepthStepCost;
//#line 70 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Ensenso.cfg"
      int ShadowingThreshold;
//#line 75 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Ensenso.cfg"
      int UniquenessRatio;
//#line 77 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Ensenso.cfg"
      int MedianFilterRadius;
//#line 79 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Ensenso.cfg"
      int SpeckleComponentThreshold;
//#line 81 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Ensenso.cfg"
      int SpeckleRegionSize;
//#line 83 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Ensenso.cfg"
      int FillBorderSpread;
//#line 85 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Ensenso.cfg"
      int FillRegionSize;
//#line 90 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Ensenso.cfg"
      bool Cloud;
//#line 92 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Ensenso.cfg"
      bool Images;
//#line 218 "/opt/ros/kinetic/share/dynamic_reconfigure/cmake/../templates/ConfigType.h.template"

    bool __fromMessage__(dynamic_reconfigure::Config &msg)
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__ = __getGroupDescriptions__();

      int count = 0;
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        if ((*i)->fromMessage(msg, *this))
          count++;

      for (std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); i ++)
      {
        if ((*i)->id == 0)
        {
          boost::any n = boost::any(this);
          (*i)->updateParams(n, *this);
          (*i)->fromMessage(msg, n);
        }
      }

      if (count != dynamic_reconfigure::ConfigTools::size(msg))
      {
        ROS_ERROR("EnsensoConfig::__fromMessage__ called with an unexpected parameter.");
        ROS_ERROR("Booleans:");
        for (unsigned int i = 0; i < msg.bools.size(); i++)
          ROS_ERROR("  %s", msg.bools[i].name.c_str());
        ROS_ERROR("Integers:");
        for (unsigned int i = 0; i < msg.ints.size(); i++)
          ROS_ERROR("  %s", msg.ints[i].name.c_str());
        ROS_ERROR("Doubles:");
        for (unsigned int i = 0; i < msg.doubles.size(); i++)
          ROS_ERROR("  %s", msg.doubles[i].name.c_str());
        ROS_ERROR("Strings:");
        for (unsigned int i = 0; i < msg.strs.size(); i++)
          ROS_ERROR("  %s", msg.strs[i].name.c_str());
        // @todo Check that there are no duplicates. Make this error more
        // explicit.
        return false;
      }
      return true;
    }

    // This version of __toMessage__ is used during initialization of
    // statics when __getParamDescriptions__ can't be called yet.
    void __toMessage__(dynamic_reconfigure::Config &msg, const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__, const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__) const
    {
      dynamic_reconfigure::ConfigTools::clear(msg);
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->toMessage(msg, *this);

      for (std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); ++i)
      {
        if((*i)->id == 0)
        {
          (*i)->toMessage(msg, *this);
        }
      }
    }

    void __toMessage__(dynamic_reconfigure::Config &msg) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__ = __getGroupDescriptions__();
      __toMessage__(msg, __param_descriptions__, __group_descriptions__);
    }

    void __toServer__(const ros::NodeHandle &nh) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->toServer(nh, *this);
    }

    void __fromServer__(const ros::NodeHandle &nh)
    {
      static bool setup=false;

      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->fromServer(nh, *this);

      const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__ = __getGroupDescriptions__();
      for (std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); i++){
        if (!setup && (*i)->id == 0) {
          setup = true;
          boost::any n = boost::any(this);
          (*i)->setInitialState(n);
        }
      }
    }

    void __clamp__()
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const EnsensoConfig &__max__ = __getMax__();
      const EnsensoConfig &__min__ = __getMin__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->clamp(*this, __max__, __min__);
    }

    uint32_t __level__(const EnsensoConfig &config) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      uint32_t level = 0;
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->calcLevel(level, config, *this);
      return level;
    }

    static const dynamic_reconfigure::ConfigDescription &__getDescriptionMessage__();
    static const EnsensoConfig &__getDefault__();
    static const EnsensoConfig &__getMax__();
    static const EnsensoConfig &__getMin__();
    static const std::vector<AbstractParamDescriptionConstPtr> &__getParamDescriptions__();
    static const std::vector<AbstractGroupDescriptionConstPtr> &__getGroupDescriptions__();

  private:
    static const EnsensoConfigStatics *__get_statics__();
  };

  template <> // Max and min are ignored for strings.
  inline void EnsensoConfig::ParamDescription<std::string>::clamp(EnsensoConfig &config, const EnsensoConfig &max, const EnsensoConfig &min) const
  {
    (void) config;
    (void) min;
    (void) max;
    return;
  }

  class EnsensoConfigStatics
  {
    friend class EnsensoConfig;

    EnsensoConfigStatics()
    {
EnsensoConfig::GroupDescription<EnsensoConfig::DEFAULT, EnsensoConfig> Default("Default", "", 0, 0, true, &EnsensoConfig::groups);
EnsensoConfig::GroupDescription<EnsensoConfig::DEFAULT::CAPTURE, EnsensoConfig::DEFAULT> Capture("Capture", "", 0, 1, true, &EnsensoConfig::DEFAULT::capture);
//#line 11 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Ensenso.cfg"
      __min__.AutoBlackLevel = 0;
//#line 11 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Ensenso.cfg"
      __max__.AutoBlackLevel = 1;
//#line 11 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Ensenso.cfg"
      __default__.AutoBlackLevel = 0;
//#line 11 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Ensenso.cfg"
      Capture.abstract_parameters.push_back(EnsensoConfig::AbstractParamDescriptionConstPtr(new EnsensoConfig::ParamDescription<bool>("AutoBlackLevel", "bool", 0, "When set to true the image sensor black level will be adjusted automatically", "", &EnsensoConfig::AutoBlackLevel)));
//#line 11 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Ensenso.cfg"
      __param_descriptions__.push_back(EnsensoConfig::AbstractParamDescriptionConstPtr(new EnsensoConfig::ParamDescription<bool>("AutoBlackLevel", "bool", 0, "When set to true the image sensor black level will be adjusted automatically", "", &EnsensoConfig::AutoBlackLevel)));
//#line 13 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Ensenso.cfg"
      __min__.AutoExposure = 0;
//#line 13 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Ensenso.cfg"
      __max__.AutoExposure = 1;
//#line 13 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Ensenso.cfg"
      __default__.AutoExposure = 0;
//#line 13 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Ensenso.cfg"
      Capture.abstract_parameters.push_back(EnsensoConfig::AbstractParamDescriptionConstPtr(new EnsensoConfig::ParamDescription<bool>("AutoExposure", "bool", 0, "When set to true the Exposure will be adjusted after each Capture command involving this camera.", "", &EnsensoConfig::AutoExposure)));
//#line 13 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Ensenso.cfg"
      __param_descriptions__.push_back(EnsensoConfig::AbstractParamDescriptionConstPtr(new EnsensoConfig::ParamDescription<bool>("AutoExposure", "bool", 0, "When set to true the Exposure will be adjusted after each Capture command involving this camera.", "", &EnsensoConfig::AutoExposure)));
//#line 15 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Ensenso.cfg"
      __min__.AutoGain = 0;
//#line 15 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Ensenso.cfg"
      __max__.AutoGain = 1;
//#line 15 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Ensenso.cfg"
      __default__.AutoGain = 1;
//#line 15 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Ensenso.cfg"
      Capture.abstract_parameters.push_back(EnsensoConfig::AbstractParamDescriptionConstPtr(new EnsensoConfig::ParamDescription<bool>("AutoGain", "bool", 0, "When set to true the Gain will be adjusted after each Capture command involving this camera.", "", &EnsensoConfig::AutoGain)));
//#line 15 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Ensenso.cfg"
      __param_descriptions__.push_back(EnsensoConfig::AbstractParamDescriptionConstPtr(new EnsensoConfig::ParamDescription<bool>("AutoGain", "bool", 0, "When set to true the Gain will be adjusted after each Capture command involving this camera.", "", &EnsensoConfig::AutoGain)));
//#line 17 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Ensenso.cfg"
      __min__.Binning = 1;
//#line 17 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Ensenso.cfg"
      __max__.Binning = 2;
//#line 17 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Ensenso.cfg"
      __default__.Binning = 1;
//#line 17 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Ensenso.cfg"
      Capture.abstract_parameters.push_back(EnsensoConfig::AbstractParamDescriptionConstPtr(new EnsensoConfig::ParamDescription<int>("Binning", "int", 0, "A positive integer specifying the binning factor.", "", &EnsensoConfig::Binning)));
//#line 17 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Ensenso.cfg"
      __param_descriptions__.push_back(EnsensoConfig::AbstractParamDescriptionConstPtr(new EnsensoConfig::ParamDescription<int>("Binning", "int", 0, "A positive integer specifying the binning factor.", "", &EnsensoConfig::Binning)));
//#line 19 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Ensenso.cfg"
      __min__.BlackLevelOffset = 0.0;
//#line 19 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Ensenso.cfg"
      __max__.BlackLevelOffset = 1.0;
//#line 19 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Ensenso.cfg"
      __default__.BlackLevelOffset = 1.0;
//#line 19 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Ensenso.cfg"
      Capture.abstract_parameters.push_back(EnsensoConfig::AbstractParamDescriptionConstPtr(new EnsensoConfig::ParamDescription<double>("BlackLevelOffset", "double", 0, "A number between 0.0 and 1.0. Values closer to zero will yield darker images, values closer to one will increase the image brightness at the expense of noise in dark image regions.", "", &EnsensoConfig::BlackLevelOffset)));
//#line 19 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Ensenso.cfg"
      __param_descriptions__.push_back(EnsensoConfig::AbstractParamDescriptionConstPtr(new EnsensoConfig::ParamDescription<double>("BlackLevelOffset", "double", 0, "A number between 0.0 and 1.0. Values closer to zero will yield darker images, values closer to one will increase the image brightness at the expense of noise in dark image regions.", "", &EnsensoConfig::BlackLevelOffset)));
//#line 21 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Ensenso.cfg"
      __min__.DisparityMapAOI = 0;
//#line 21 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Ensenso.cfg"
      __max__.DisparityMapAOI = 1;
//#line 21 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Ensenso.cfg"
      __default__.DisparityMapAOI = 0;
//#line 21 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Ensenso.cfg"
      Capture.abstract_parameters.push_back(EnsensoConfig::AbstractParamDescriptionConstPtr(new EnsensoConfig::ParamDescription<bool>("DisparityMapAOI", "bool", 0, "When set to true the camera's capture AOI will be reduced.", "", &EnsensoConfig::DisparityMapAOI)));
//#line 21 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Ensenso.cfg"
      __param_descriptions__.push_back(EnsensoConfig::AbstractParamDescriptionConstPtr(new EnsensoConfig::ParamDescription<bool>("DisparityMapAOI", "bool", 0, "When set to true the camera's capture AOI will be reduced.", "", &EnsensoConfig::DisparityMapAOI)));
//#line 23 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Ensenso.cfg"
      __min__.Exposure = 0.01;
//#line 23 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Ensenso.cfg"
      __max__.Exposure = 20.0;
//#line 23 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Ensenso.cfg"
      __default__.Exposure = 10.0;
//#line 23 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Ensenso.cfg"
      Capture.abstract_parameters.push_back(EnsensoConfig::AbstractParamDescriptionConstPtr(new EnsensoConfig::ParamDescription<double>("Exposure", "double", 0, "Specifies the camera's exposure time in milliseconds.", "", &EnsensoConfig::Exposure)));
//#line 23 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Ensenso.cfg"
      __param_descriptions__.push_back(EnsensoConfig::AbstractParamDescriptionConstPtr(new EnsensoConfig::ParamDescription<double>("Exposure", "double", 0, "Specifies the camera's exposure time in milliseconds.", "", &EnsensoConfig::Exposure)));
//#line 25 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Ensenso.cfg"
      __min__.FrontLight = 0;
//#line 25 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Ensenso.cfg"
      __max__.FrontLight = 1;
//#line 25 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Ensenso.cfg"
      __default__.FrontLight = 1;
//#line 25 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Ensenso.cfg"
      Capture.abstract_parameters.push_back(EnsensoConfig::AbstractParamDescriptionConstPtr(new EnsensoConfig::ParamDescription<bool>("FrontLight", "bool", 0, "When set to true the camera's front LED will be switched on for the duration of the image exposure.", "", &EnsensoConfig::FrontLight)));
//#line 25 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Ensenso.cfg"
      __param_descriptions__.push_back(EnsensoConfig::AbstractParamDescriptionConstPtr(new EnsensoConfig::ParamDescription<bool>("FrontLight", "bool", 0, "When set to true the camera's front LED will be switched on for the duration of the image exposure.", "", &EnsensoConfig::FrontLight)));
//#line 27 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Ensenso.cfg"
      __min__.Gain = 1.0;
//#line 27 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Ensenso.cfg"
      __max__.Gain = 4.0;
//#line 27 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Ensenso.cfg"
      __default__.Gain = 1.27;
//#line 27 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Ensenso.cfg"
      Capture.abstract_parameters.push_back(EnsensoConfig::AbstractParamDescriptionConstPtr(new EnsensoConfig::ParamDescription<double>("Gain", "double", 0, "A value in the range 1..MaxGain specifying the camera's analog gain factor", "", &EnsensoConfig::Gain)));
//#line 27 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Ensenso.cfg"
      __param_descriptions__.push_back(EnsensoConfig::AbstractParamDescriptionConstPtr(new EnsensoConfig::ParamDescription<double>("Gain", "double", 0, "A value in the range 1..MaxGain specifying the camera's analog gain factor", "", &EnsensoConfig::Gain)));
//#line 29 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Ensenso.cfg"
      __min__.GainBoost = 0;
//#line 29 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Ensenso.cfg"
      __max__.GainBoost = 1;
//#line 29 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Ensenso.cfg"
      __default__.GainBoost = 0;
//#line 29 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Ensenso.cfg"
      Capture.abstract_parameters.push_back(EnsensoConfig::AbstractParamDescriptionConstPtr(new EnsensoConfig::ParamDescription<bool>("GainBoost", "bool", 0, "When set to true an additional analog gain boost on the camera will be enabled.", "", &EnsensoConfig::GainBoost)));
//#line 29 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Ensenso.cfg"
      __param_descriptions__.push_back(EnsensoConfig::AbstractParamDescriptionConstPtr(new EnsensoConfig::ParamDescription<bool>("GainBoost", "bool", 0, "When set to true an additional analog gain boost on the camera will be enabled.", "", &EnsensoConfig::GainBoost)));
//#line 31 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Ensenso.cfg"
      __min__.HardwareGamma = 0;
//#line 31 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Ensenso.cfg"
      __max__.HardwareGamma = 1;
//#line 31 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Ensenso.cfg"
      __default__.HardwareGamma = 0;
//#line 31 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Ensenso.cfg"
      Capture.abstract_parameters.push_back(EnsensoConfig::AbstractParamDescriptionConstPtr(new EnsensoConfig::ParamDescription<bool>("HardwareGamma", "bool", 0, "When set to true the cameras analog gamma correction will be enabled.", "", &EnsensoConfig::HardwareGamma)));
//#line 31 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Ensenso.cfg"
      __param_descriptions__.push_back(EnsensoConfig::AbstractParamDescriptionConstPtr(new EnsensoConfig::ParamDescription<bool>("HardwareGamma", "bool", 0, "When set to true the cameras analog gamma correction will be enabled.", "", &EnsensoConfig::HardwareGamma)));
//#line 33 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Ensenso.cfg"
      __min__.HDR = 0;
//#line 33 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Ensenso.cfg"
      __max__.HDR = 1;
//#line 33 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Ensenso.cfg"
      __default__.HDR = 0;
//#line 33 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Ensenso.cfg"
      Capture.abstract_parameters.push_back(EnsensoConfig::AbstractParamDescriptionConstPtr(new EnsensoConfig::ParamDescription<bool>("HDR", "bool", 0, "When set to true the HDR function of the camera will be enabled.", "", &EnsensoConfig::HDR)));
//#line 33 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Ensenso.cfg"
      __param_descriptions__.push_back(EnsensoConfig::AbstractParamDescriptionConstPtr(new EnsensoConfig::ParamDescription<bool>("HDR", "bool", 0, "When set to true the HDR function of the camera will be enabled.", "", &EnsensoConfig::HDR)));
//#line 35 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Ensenso.cfg"
      __min__.PixelClock = 7;
//#line 35 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Ensenso.cfg"
      __max__.PixelClock = 43;
//#line 35 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Ensenso.cfg"
      __default__.PixelClock = 24;
//#line 35 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Ensenso.cfg"
      Capture.abstract_parameters.push_back(EnsensoConfig::AbstractParamDescriptionConstPtr(new EnsensoConfig::ParamDescription<int>("PixelClock", "int", 0, "An integer number specifying the cameras pixel clock in MHz. Range: [7-43]", "", &EnsensoConfig::PixelClock)));
//#line 35 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Ensenso.cfg"
      __param_descriptions__.push_back(EnsensoConfig::AbstractParamDescriptionConstPtr(new EnsensoConfig::ParamDescription<int>("PixelClock", "int", 0, "An integer number specifying the cameras pixel clock in MHz. Range: [7-43]", "", &EnsensoConfig::PixelClock)));
//#line 37 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Ensenso.cfg"
      __min__.Projector = 0;
//#line 37 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Ensenso.cfg"
      __max__.Projector = 1;
//#line 37 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Ensenso.cfg"
      __default__.Projector = 1;
//#line 37 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Ensenso.cfg"
      Capture.abstract_parameters.push_back(EnsensoConfig::AbstractParamDescriptionConstPtr(new EnsensoConfig::ParamDescription<bool>("Projector", "bool", 0, "When set to true the camera's pattern projector will be switched on for the duration of the image exposure.", "", &EnsensoConfig::Projector)));
//#line 37 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Ensenso.cfg"
      __param_descriptions__.push_back(EnsensoConfig::AbstractParamDescriptionConstPtr(new EnsensoConfig::ParamDescription<bool>("Projector", "bool", 0, "When set to true the camera's pattern projector will be switched on for the duration of the image exposure.", "", &EnsensoConfig::Projector)));
//#line 39 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Ensenso.cfg"
      __min__.TargetBrightness = 40;
//#line 39 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Ensenso.cfg"
      __max__.TargetBrightness = 210;
//#line 39 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Ensenso.cfg"
      __default__.TargetBrightness = 80;
//#line 39 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Ensenso.cfg"
      Capture.abstract_parameters.push_back(EnsensoConfig::AbstractParamDescriptionConstPtr(new EnsensoConfig::ParamDescription<int>("TargetBrightness", "int", 0, "Positive number from 40 to 210, specifying the desired average gray value of both images.", "", &EnsensoConfig::TargetBrightness)));
//#line 39 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Ensenso.cfg"
      __param_descriptions__.push_back(EnsensoConfig::AbstractParamDescriptionConstPtr(new EnsensoConfig::ParamDescription<int>("TargetBrightness", "int", 0, "Positive number from 40 to 210, specifying the desired average gray value of both images.", "", &EnsensoConfig::TargetBrightness)));
//#line 46 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Ensenso.cfg"
      __min__.TriggerMode = 0;
//#line 46 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Ensenso.cfg"
      __max__.TriggerMode = 2;
//#line 46 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Ensenso.cfg"
      __default__.TriggerMode = 0;
//#line 46 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Ensenso.cfg"
      Capture.abstract_parameters.push_back(EnsensoConfig::AbstractParamDescriptionConstPtr(new EnsensoConfig::ParamDescription<int>("TriggerMode", "int", 0, "Specifies how an image capture is initiated.", "{'enum_description': 'Specifies how an image capture is initiated.', 'enum': [{'srcline': 41, 'description': 'The camera starts the exposure by software trigger when the Capture command is issued.', 'srcfile': '/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Ensenso.cfg', 'cconsttype': 'const int', 'value': 0, 'ctype': 'int', 'type': 'int', 'name': 'Software'}, {'srcline': 42, 'description': 'The Capture command waits for a high-to-low transition on the trigger input before starting the exposure.', 'srcfile': '/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Ensenso.cfg', 'cconsttype': 'const int', 'value': 1, 'ctype': 'int', 'type': 'int', 'name': 'FallingEdge'}, {'srcline': 43, 'description': 'The Capture command waits for a low-to-high transition on the trigger input before starting the exposure.', 'srcfile': '/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Ensenso.cfg', 'cconsttype': 'const int', 'value': 2, 'ctype': 'int', 'type': 'int', 'name': 'RisingEdge'}]}", &EnsensoConfig::TriggerMode)));
//#line 46 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Ensenso.cfg"
      __param_descriptions__.push_back(EnsensoConfig::AbstractParamDescriptionConstPtr(new EnsensoConfig::ParamDescription<int>("TriggerMode", "int", 0, "Specifies how an image capture is initiated.", "{'enum_description': 'Specifies how an image capture is initiated.', 'enum': [{'srcline': 41, 'description': 'The camera starts the exposure by software trigger when the Capture command is issued.', 'srcfile': '/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Ensenso.cfg', 'cconsttype': 'const int', 'value': 0, 'ctype': 'int', 'type': 'int', 'name': 'Software'}, {'srcline': 42, 'description': 'The Capture command waits for a high-to-low transition on the trigger input before starting the exposure.', 'srcfile': '/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Ensenso.cfg', 'cconsttype': 'const int', 'value': 1, 'ctype': 'int', 'type': 'int', 'name': 'FallingEdge'}, {'srcline': 43, 'description': 'The Capture command waits for a low-to-high transition on the trigger input before starting the exposure.', 'srcfile': '/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Ensenso.cfg', 'cconsttype': 'const int', 'value': 2, 'ctype': 'int', 'type': 'int', 'name': 'RisingEdge'}]}", &EnsensoConfig::TriggerMode)));
//#line 124 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Capture.convertParams();
//#line 124 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.groups.push_back(EnsensoConfig::AbstractGroupDescriptionConstPtr(new EnsensoConfig::GroupDescription<EnsensoConfig::DEFAULT::CAPTURE, EnsensoConfig::DEFAULT>(Capture)));
//#line 124 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __group_descriptions__.push_back(EnsensoConfig::AbstractGroupDescriptionConstPtr(new EnsensoConfig::GroupDescription<EnsensoConfig::DEFAULT::CAPTURE, EnsensoConfig::DEFAULT>(Capture)));
EnsensoConfig::GroupDescription<EnsensoConfig::DEFAULT::STEREO, EnsensoConfig::DEFAULT> Stereo("Stereo", "", 0, 2, true, &EnsensoConfig::DEFAULT::stereo);
//#line 51 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Ensenso.cfg"
      __min__.MinimumDisparity = -256;
//#line 51 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Ensenso.cfg"
      __max__.MinimumDisparity = 256;
//#line 51 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Ensenso.cfg"
      __default__.MinimumDisparity = -64;
//#line 51 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Ensenso.cfg"
      Stereo.abstract_parameters.push_back(EnsensoConfig::AbstractParamDescriptionConstPtr(new EnsensoConfig::ParamDescription<int>("MinimumDisparity", "int", 0, "The minimum disparity in pixels where correspondences in the stereo image pair are being searched. The resolution reductions by Scaling and Binning are automatically accounted for. The actual value used in the matching process is output in ScaledMinimumDisparity.", "", &EnsensoConfig::MinimumDisparity)));
//#line 51 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Ensenso.cfg"
      __param_descriptions__.push_back(EnsensoConfig::AbstractParamDescriptionConstPtr(new EnsensoConfig::ParamDescription<int>("MinimumDisparity", "int", 0, "The minimum disparity in pixels where correspondences in the stereo image pair are being searched. The resolution reductions by Scaling and Binning are automatically accounted for. The actual value used in the matching process is output in ScaledMinimumDisparity.", "", &EnsensoConfig::MinimumDisparity)));
//#line 53 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Ensenso.cfg"
      __min__.NumberOfDisparities = 32;
//#line 53 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Ensenso.cfg"
      __max__.NumberOfDisparities = 256;
//#line 53 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Ensenso.cfg"
      __default__.NumberOfDisparities = 128;
//#line 53 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Ensenso.cfg"
      Stereo.abstract_parameters.push_back(EnsensoConfig::AbstractParamDescriptionConstPtr(new EnsensoConfig::ParamDescription<int>("NumberOfDisparities", "int", 0, "The number of disparities in pixels where correspondences in the stereo image pair are being searched, starting at MinDisparity. The resolution reductions by Scaling and Binning are automatically accounted for. The actual value used in the matching process is output in ScaledNumberOfDisparities.", "", &EnsensoConfig::NumberOfDisparities)));
//#line 53 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Ensenso.cfg"
      __param_descriptions__.push_back(EnsensoConfig::AbstractParamDescriptionConstPtr(new EnsensoConfig::ParamDescription<int>("NumberOfDisparities", "int", 0, "The number of disparities in pixels where correspondences in the stereo image pair are being searched, starting at MinDisparity. The resolution reductions by Scaling and Binning are automatically accounted for. The actual value used in the matching process is output in ScaledNumberOfDisparities.", "", &EnsensoConfig::NumberOfDisparities)));
//#line 55 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Ensenso.cfg"
      __min__.Scaling = 0.25;
//#line 55 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Ensenso.cfg"
      __max__.Scaling = 1.0;
//#line 55 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Ensenso.cfg"
      __default__.Scaling = 1.0;
//#line 55 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Ensenso.cfg"
      Stereo.abstract_parameters.push_back(EnsensoConfig::AbstractParamDescriptionConstPtr(new EnsensoConfig::ParamDescription<double>("Scaling", "double", 0, "Scaling allows to reduce the camera resolution by an arbitrary non-integer factor during rectification. The camera raw images stay at their original size, but the rectified images, DisparityMap and PointMap will be scaled by the specified factor to improve stereo matching runtime. This allows you to choose you own tradeoff between image resolution and performance.", "", &EnsensoConfig::Scaling)));
//#line 55 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Ensenso.cfg"
      __param_descriptions__.push_back(EnsensoConfig::AbstractParamDescriptionConstPtr(new EnsensoConfig::ParamDescription<double>("Scaling", "double", 0, "Scaling allows to reduce the camera resolution by an arbitrary non-integer factor during rectification. The camera raw images stay at their original size, but the rectified images, DisparityMap and PointMap will be scaled by the specified factor to improve stereo matching runtime. This allows you to choose you own tradeoff between image resolution and performance.", "", &EnsensoConfig::Scaling)));
//#line 62 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Ensenso.cfg"
      __min__.OptimizationProfile = 0;
//#line 62 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Ensenso.cfg"
      __max__.OptimizationProfile = 2;
//#line 62 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Ensenso.cfg"
      __default__.OptimizationProfile = 2;
//#line 62 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Ensenso.cfg"
      Stereo.abstract_parameters.push_back(EnsensoConfig::AbstractParamDescriptionConstPtr(new EnsensoConfig::ParamDescription<int>("OptimizationProfile", "int", 0, "The type of Semi-Global-Matching optimization carried out on the cost function.", "{'enum_description': 'The type of Semi-Global-Matching optimization carried out on the cost function.', 'enum': [{'srcline': 57, 'description': 'Propagate cost along 4 paths, corresonding to the pixel axes of the rectified images.', 'srcfile': '/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Ensenso.cfg', 'cconsttype': 'const int', 'value': 0, 'ctype': 'int', 'type': 'int', 'name': 'Aligned'}, {'srcline': 58, 'description': 'Propagate cost on the 4 paths, corresponding the all 45 degree pixel diagonals.', 'srcfile': '/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Ensenso.cfg', 'cconsttype': 'const int', 'value': 1, 'ctype': 'int', 'type': 'int', 'name': 'Diagonal'}, {'srcline': 59, 'description': 'Propagate along all 8 paths, aligned and diagonal. This setting yields the best matching results, but slowest performance.', 'srcfile': '/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Ensenso.cfg', 'cconsttype': 'const int', 'value': 2, 'ctype': 'int', 'type': 'int', 'name': 'AlignedAndDiagonal'}]}", &EnsensoConfig::OptimizationProfile)));
//#line 62 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Ensenso.cfg"
      __param_descriptions__.push_back(EnsensoConfig::AbstractParamDescriptionConstPtr(new EnsensoConfig::ParamDescription<int>("OptimizationProfile", "int", 0, "The type of Semi-Global-Matching optimization carried out on the cost function.", "{'enum_description': 'The type of Semi-Global-Matching optimization carried out on the cost function.', 'enum': [{'srcline': 57, 'description': 'Propagate cost along 4 paths, corresonding to the pixel axes of the rectified images.', 'srcfile': '/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Ensenso.cfg', 'cconsttype': 'const int', 'value': 0, 'ctype': 'int', 'type': 'int', 'name': 'Aligned'}, {'srcline': 58, 'description': 'Propagate cost on the 4 paths, corresponding the all 45 degree pixel diagonals.', 'srcfile': '/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Ensenso.cfg', 'cconsttype': 'const int', 'value': 1, 'ctype': 'int', 'type': 'int', 'name': 'Diagonal'}, {'srcline': 59, 'description': 'Propagate along all 8 paths, aligned and diagonal. This setting yields the best matching results, but slowest performance.', 'srcfile': '/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Ensenso.cfg', 'cconsttype': 'const int', 'value': 2, 'ctype': 'int', 'type': 'int', 'name': 'AlignedAndDiagonal'}]}", &EnsensoConfig::OptimizationProfile)));
//#line 66 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Ensenso.cfg"
      __min__.DepthChangeCost = 1;
//#line 66 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Ensenso.cfg"
      __max__.DepthChangeCost = 40;
//#line 66 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Ensenso.cfg"
      __default__.DepthChangeCost = 5;
//#line 66 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Ensenso.cfg"
      Stereo.abstract_parameters.push_back(EnsensoConfig::AbstractParamDescriptionConstPtr(new EnsensoConfig::ParamDescription<int>("DepthChangeCost", "int", 0, "The penalty for changes of +/- 1 disparity along an optimization path. This value must be smaller than DepthStepCost. Setting a larger value for DepthChangeCost will result in smoother surfaces, but some details might get lost when setting this value too large.", "", &EnsensoConfig::DepthChangeCost)));
//#line 66 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Ensenso.cfg"
      __param_descriptions__.push_back(EnsensoConfig::AbstractParamDescriptionConstPtr(new EnsensoConfig::ParamDescription<int>("DepthChangeCost", "int", 0, "The penalty for changes of +/- 1 disparity along an optimization path. This value must be smaller than DepthStepCost. Setting a larger value for DepthChangeCost will result in smoother surfaces, but some details might get lost when setting this value too large.", "", &EnsensoConfig::DepthChangeCost)));
//#line 68 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Ensenso.cfg"
      __min__.DepthStepCost = 2;
//#line 68 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Ensenso.cfg"
      __max__.DepthStepCost = 41;
//#line 68 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Ensenso.cfg"
      __default__.DepthStepCost = 30;
//#line 68 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Ensenso.cfg"
      Stereo.abstract_parameters.push_back(EnsensoConfig::AbstractParamDescriptionConstPtr(new EnsensoConfig::ParamDescription<int>("DepthStepCost", "int", 0, "The penalty for steps (changes of more than one disparity) along an optimization path. This value must be larger than DepthChangeCost. Setting a larger value for DepthStepCost will yield better detection of planar surfaces in low contrast areas, but too large values will lead to a loss of geometry details and precise object boundaries.(strictly larger than DepthChangeCost)", "", &EnsensoConfig::DepthStepCost)));
//#line 68 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Ensenso.cfg"
      __param_descriptions__.push_back(EnsensoConfig::AbstractParamDescriptionConstPtr(new EnsensoConfig::ParamDescription<int>("DepthStepCost", "int", 0, "The penalty for steps (changes of more than one disparity) along an optimization path. This value must be larger than DepthChangeCost. Setting a larger value for DepthStepCost will yield better detection of planar surfaces in low contrast areas, but too large values will lead to a loss of geometry details and precise object boundaries.(strictly larger than DepthChangeCost)", "", &EnsensoConfig::DepthStepCost)));
//#line 70 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Ensenso.cfg"
      __min__.ShadowingThreshold = -1;
//#line 70 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Ensenso.cfg"
      __max__.ShadowingThreshold = 2;
//#line 70 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Ensenso.cfg"
      __default__.ShadowingThreshold = 1;
//#line 70 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Ensenso.cfg"
      Stereo.abstract_parameters.push_back(EnsensoConfig::AbstractParamDescriptionConstPtr(new EnsensoConfig::ParamDescription<int>("ShadowingThreshold", "int", 0, "The disparity map is checked for occluded pixels. This is usually called 'left-right consistency check'. A pixel is only accepted if it is a mutually best match with the assigned right image pixel. Due to subpixel interpolation and half-occluded pixels, it is reasonable to allow small deviations from 'exact mutual' matches. This threshold sets the allowed range of mismatch in pixels.An integer specifying the threshold in disparities by which a pixel might be occluded by another pixel to still be accepted as valid. Negative values disable the occlusion detection and will leave wrongly associated regions in occluded image areas.", "", &EnsensoConfig::ShadowingThreshold)));
//#line 70 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Ensenso.cfg"
      __param_descriptions__.push_back(EnsensoConfig::AbstractParamDescriptionConstPtr(new EnsensoConfig::ParamDescription<int>("ShadowingThreshold", "int", 0, "The disparity map is checked for occluded pixels. This is usually called 'left-right consistency check'. A pixel is only accepted if it is a mutually best match with the assigned right image pixel. Due to subpixel interpolation and half-occluded pixels, it is reasonable to allow small deviations from 'exact mutual' matches. This threshold sets the allowed range of mismatch in pixels.An integer specifying the threshold in disparities by which a pixel might be occluded by another pixel to still be accepted as valid. Negative values disable the occlusion detection and will leave wrongly associated regions in occluded image areas.", "", &EnsensoConfig::ShadowingThreshold)));
//#line 124 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Stereo.convertParams();
//#line 124 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.groups.push_back(EnsensoConfig::AbstractGroupDescriptionConstPtr(new EnsensoConfig::GroupDescription<EnsensoConfig::DEFAULT::STEREO, EnsensoConfig::DEFAULT>(Stereo)));
//#line 124 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __group_descriptions__.push_back(EnsensoConfig::AbstractGroupDescriptionConstPtr(new EnsensoConfig::GroupDescription<EnsensoConfig::DEFAULT::STEREO, EnsensoConfig::DEFAULT>(Stereo)));
EnsensoConfig::GroupDescription<EnsensoConfig::DEFAULT::POSTPROC, EnsensoConfig::DEFAULT> Postproc("Postproc", "", 0, 3, true, &EnsensoConfig::DEFAULT::postproc);
//#line 75 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Ensenso.cfg"
      __min__.UniquenessRatio = 0;
//#line 75 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Ensenso.cfg"
      __max__.UniquenessRatio = 99;
//#line 75 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Ensenso.cfg"
      __default__.UniquenessRatio = 0;
//#line 75 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Ensenso.cfg"
      Postproc.abstract_parameters.push_back(EnsensoConfig::AbstractParamDescriptionConstPtr(new EnsensoConfig::ParamDescription<int>("UniquenessRatio", "int", 0, "Filters the pixels depending on the uniqueness of the found correspondence. The value indicates the percentage, by which the cost of the next best correspondence must be larger (compared to the best correspondence), such that the pixel is accepted. Input para is an integer specifying the uniqueness margin in percent. Setting this parameter to 0 disables the uniqueness filter.", "", &EnsensoConfig::UniquenessRatio)));
//#line 75 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Ensenso.cfg"
      __param_descriptions__.push_back(EnsensoConfig::AbstractParamDescriptionConstPtr(new EnsensoConfig::ParamDescription<int>("UniquenessRatio", "int", 0, "Filters the pixels depending on the uniqueness of the found correspondence. The value indicates the percentage, by which the cost of the next best correspondence must be larger (compared to the best correspondence), such that the pixel is accepted. Input para is an integer specifying the uniqueness margin in percent. Setting this parameter to 0 disables the uniqueness filter.", "", &EnsensoConfig::UniquenessRatio)));
//#line 77 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Ensenso.cfg"
      __min__.MedianFilterRadius = 0;
//#line 77 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Ensenso.cfg"
      __max__.MedianFilterRadius = 2;
//#line 77 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Ensenso.cfg"
      __default__.MedianFilterRadius = 0;
//#line 77 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Ensenso.cfg"
      Postproc.abstract_parameters.push_back(EnsensoConfig::AbstractParamDescriptionConstPtr(new EnsensoConfig::ParamDescription<int>("MedianFilterRadius", "int", 0, "Specifies the size of the median filter as radius in pixels, excluding the center pixel.The filter is applied to the disparity map. Median filtering will reduce noise inside surfaces while maintaining sharp edges, but object corners will be rounded. Input para is an integer specifying half the median filter window size in pixels, excluding the center pixel. Setting the filter radius to 0 will disable median filtering.", "", &EnsensoConfig::MedianFilterRadius)));
//#line 77 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Ensenso.cfg"
      __param_descriptions__.push_back(EnsensoConfig::AbstractParamDescriptionConstPtr(new EnsensoConfig::ParamDescription<int>("MedianFilterRadius", "int", 0, "Specifies the size of the median filter as radius in pixels, excluding the center pixel.The filter is applied to the disparity map. Median filtering will reduce noise inside surfaces while maintaining sharp edges, but object corners will be rounded. Input para is an integer specifying half the median filter window size in pixels, excluding the center pixel. Setting the filter radius to 0 will disable median filtering.", "", &EnsensoConfig::MedianFilterRadius)));
//#line 79 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Ensenso.cfg"
      __min__.SpeckleComponentThreshold = 1;
//#line 79 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Ensenso.cfg"
      __max__.SpeckleComponentThreshold = 16;
//#line 79 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Ensenso.cfg"
      __default__.SpeckleComponentThreshold = 1;
//#line 79 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Ensenso.cfg"
      Postproc.abstract_parameters.push_back(EnsensoConfig::AbstractParamDescriptionConstPtr(new EnsensoConfig::ParamDescription<int>("SpeckleComponentThreshold", "int", 0, "Defines how the image is divided into regions for speckle filtering. Whenever two neighboring pixel disparities differ by more than ComponentThreshold disparities, the two pixels are considered as belonging to separate regions. Consequently, each resulting region will not have discontinuities larger or equal to ComponentThreshold in it's disparity map area. The smaller this threshold is set, the smaller the resulting disparity regions will be. Thus setting a smaller ComponentThreshold will result in more regions being filtered out, because some regions fall apart and their sizes drop below RegionSize.", "", &EnsensoConfig::SpeckleComponentThreshold)));
//#line 79 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Ensenso.cfg"
      __param_descriptions__.push_back(EnsensoConfig::AbstractParamDescriptionConstPtr(new EnsensoConfig::ParamDescription<int>("SpeckleComponentThreshold", "int", 0, "Defines how the image is divided into regions for speckle filtering. Whenever two neighboring pixel disparities differ by more than ComponentThreshold disparities, the two pixels are considered as belonging to separate regions. Consequently, each resulting region will not have discontinuities larger or equal to ComponentThreshold in it's disparity map area. The smaller this threshold is set, the smaller the resulting disparity regions will be. Thus setting a smaller ComponentThreshold will result in more regions being filtered out, because some regions fall apart and their sizes drop below RegionSize.", "", &EnsensoConfig::SpeckleComponentThreshold)));
//#line 81 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Ensenso.cfg"
      __min__.SpeckleRegionSize = 0;
//#line 81 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Ensenso.cfg"
      __max__.SpeckleRegionSize = 1000;
//#line 81 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Ensenso.cfg"
      __default__.SpeckleRegionSize = 0;
//#line 81 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Ensenso.cfg"
      Postproc.abstract_parameters.push_back(EnsensoConfig::AbstractParamDescriptionConstPtr(new EnsensoConfig::ParamDescription<int>("SpeckleRegionSize", "int", 0, "The size in pixels of a disparity map region below which the region will be removed from the disparity map. The computation of the regions is controlled by ComponentThreshold. Input para is an integer specifying the size in pixels below which a region will be removed from the disparity map. Setting this parameter to 0 disables the speckle filter.", "", &EnsensoConfig::SpeckleRegionSize)));
//#line 81 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Ensenso.cfg"
      __param_descriptions__.push_back(EnsensoConfig::AbstractParamDescriptionConstPtr(new EnsensoConfig::ParamDescription<int>("SpeckleRegionSize", "int", 0, "The size in pixels of a disparity map region below which the region will be removed from the disparity map. The computation of the regions is controlled by ComponentThreshold. Input para is an integer specifying the size in pixels below which a region will be removed from the disparity map. Setting this parameter to 0 disables the speckle filter.", "", &EnsensoConfig::SpeckleRegionSize)));
//#line 83 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Ensenso.cfg"
      __min__.FillBorderSpread = 1;
//#line 83 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Ensenso.cfg"
      __max__.FillBorderSpread = 16;
//#line 83 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Ensenso.cfg"
      __default__.FillBorderSpread = 1;
//#line 83 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Ensenso.cfg"
      Postproc.abstract_parameters.push_back(EnsensoConfig::AbstractParamDescriptionConstPtr(new EnsensoConfig::ParamDescription<int>("FillBorderSpread", "int", 0, "Defines which missing regions will be filled by setting a threshold on the maximum spread of the disparities on the region boundary. Setting this value reasonably small will ensure that only missing patches inside planar faces will be filled whereas gaps at depth discontinuities are kept unfilled. Input para is an integer specifying the maximum spread of the disparities at the fill region border.", "", &EnsensoConfig::FillBorderSpread)));
//#line 83 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Ensenso.cfg"
      __param_descriptions__.push_back(EnsensoConfig::AbstractParamDescriptionConstPtr(new EnsensoConfig::ParamDescription<int>("FillBorderSpread", "int", 0, "Defines which missing regions will be filled by setting a threshold on the maximum spread of the disparities on the region boundary. Setting this value reasonably small will ensure that only missing patches inside planar faces will be filled whereas gaps at depth discontinuities are kept unfilled. Input para is an integer specifying the maximum spread of the disparities at the fill region border.", "", &EnsensoConfig::FillBorderSpread)));
//#line 85 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Ensenso.cfg"
      __min__.FillRegionSize = 0;
//#line 85 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Ensenso.cfg"
      __max__.FillRegionSize = 300;
//#line 85 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Ensenso.cfg"
      __default__.FillRegionSize = 0;
//#line 85 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Ensenso.cfg"
      Postproc.abstract_parameters.push_back(EnsensoConfig::AbstractParamDescriptionConstPtr(new EnsensoConfig::ParamDescription<int>("FillRegionSize", "int", 0, "Defines an upper limit on the region size in pixels, up to which a region is accepted for filling. The region must also satisfy the BorderSpread condition to be filled. Input para is an integer specifying region size in pixels, up to which a missing region is being filled. Setting this parameter to 0 disables the hole filling filter.", "", &EnsensoConfig::FillRegionSize)));
//#line 85 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Ensenso.cfg"
      __param_descriptions__.push_back(EnsensoConfig::AbstractParamDescriptionConstPtr(new EnsensoConfig::ParamDescription<int>("FillRegionSize", "int", 0, "Defines an upper limit on the region size in pixels, up to which a region is accepted for filling. The region must also satisfy the BorderSpread condition to be filled. Input para is an integer specifying region size in pixels, up to which a missing region is being filled. Setting this parameter to 0 disables the hole filling filter.", "", &EnsensoConfig::FillRegionSize)));
//#line 124 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Postproc.convertParams();
//#line 124 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.groups.push_back(EnsensoConfig::AbstractGroupDescriptionConstPtr(new EnsensoConfig::GroupDescription<EnsensoConfig::DEFAULT::POSTPROC, EnsensoConfig::DEFAULT>(Postproc)));
//#line 124 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __group_descriptions__.push_back(EnsensoConfig::AbstractGroupDescriptionConstPtr(new EnsensoConfig::GroupDescription<EnsensoConfig::DEFAULT::POSTPROC, EnsensoConfig::DEFAULT>(Postproc)));
EnsensoConfig::GroupDescription<EnsensoConfig::DEFAULT::STREAM, EnsensoConfig::DEFAULT> Stream("Stream", "", 0, 4, true, &EnsensoConfig::DEFAULT::stream);
//#line 90 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Ensenso.cfg"
      __min__.Cloud = 0;
//#line 90 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Ensenso.cfg"
      __max__.Cloud = 1;
//#line 90 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Ensenso.cfg"
      __default__.Cloud = 1;
//#line 90 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Ensenso.cfg"
      Stream.abstract_parameters.push_back(EnsensoConfig::AbstractParamDescriptionConstPtr(new EnsensoConfig::ParamDescription<bool>("Cloud", "bool", 0, "When set to true the camera streams the point cloud. The rate can be adjusted changing PixelClock", "", &EnsensoConfig::Cloud)));
//#line 90 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Ensenso.cfg"
      __param_descriptions__.push_back(EnsensoConfig::AbstractParamDescriptionConstPtr(new EnsensoConfig::ParamDescription<bool>("Cloud", "bool", 0, "When set to true the camera streams the point cloud. The rate can be adjusted changing PixelClock", "", &EnsensoConfig::Cloud)));
//#line 92 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Ensenso.cfg"
      __min__.Images = 0;
//#line 92 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Ensenso.cfg"
      __max__.Images = 1;
//#line 92 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Ensenso.cfg"
      __default__.Images = 1;
//#line 92 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Ensenso.cfg"
      Stream.abstract_parameters.push_back(EnsensoConfig::AbstractParamDescriptionConstPtr(new EnsensoConfig::ParamDescription<bool>("Images", "bool", 0, "When set to true the camera streams the images. The rate can be adjusted changing PixelClock", "", &EnsensoConfig::Images)));
//#line 92 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Ensenso.cfg"
      __param_descriptions__.push_back(EnsensoConfig::AbstractParamDescriptionConstPtr(new EnsensoConfig::ParamDescription<bool>("Images", "bool", 0, "When set to true the camera streams the images. The rate can be adjusted changing PixelClock", "", &EnsensoConfig::Images)));
//#line 124 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Stream.convertParams();
//#line 124 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.groups.push_back(EnsensoConfig::AbstractGroupDescriptionConstPtr(new EnsensoConfig::GroupDescription<EnsensoConfig::DEFAULT::STREAM, EnsensoConfig::DEFAULT>(Stream)));
//#line 124 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __group_descriptions__.push_back(EnsensoConfig::AbstractGroupDescriptionConstPtr(new EnsensoConfig::GroupDescription<EnsensoConfig::DEFAULT::STREAM, EnsensoConfig::DEFAULT>(Stream)));
//#line 245 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.convertParams();
//#line 245 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __group_descriptions__.push_back(EnsensoConfig::AbstractGroupDescriptionConstPtr(new EnsensoConfig::GroupDescription<EnsensoConfig::DEFAULT, EnsensoConfig>(Default)));
//#line 356 "/opt/ros/kinetic/share/dynamic_reconfigure/cmake/../templates/ConfigType.h.template"

      for (std::vector<EnsensoConfig::AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); ++i)
      {
        __description_message__.groups.push_back(**i);
      }
      __max__.__toMessage__(__description_message__.max, __param_descriptions__, __group_descriptions__);
      __min__.__toMessage__(__description_message__.min, __param_descriptions__, __group_descriptions__);
      __default__.__toMessage__(__description_message__.dflt, __param_descriptions__, __group_descriptions__);
    }
    std::vector<EnsensoConfig::AbstractParamDescriptionConstPtr> __param_descriptions__;
    std::vector<EnsensoConfig::AbstractGroupDescriptionConstPtr> __group_descriptions__;
    EnsensoConfig __max__;
    EnsensoConfig __min__;
    EnsensoConfig __default__;
    dynamic_reconfigure::ConfigDescription __description_message__;

    static const EnsensoConfigStatics *get_instance()
    {
      // Split this off in a separate function because I know that
      // instance will get initialized the first time get_instance is
      // called, and I am guaranteeing that get_instance gets called at
      // most once.
      static EnsensoConfigStatics instance;
      return &instance;
    }
  };

  inline const dynamic_reconfigure::ConfigDescription &EnsensoConfig::__getDescriptionMessage__()
  {
    return __get_statics__()->__description_message__;
  }

  inline const EnsensoConfig &EnsensoConfig::__getDefault__()
  {
    return __get_statics__()->__default__;
  }

  inline const EnsensoConfig &EnsensoConfig::__getMax__()
  {
    return __get_statics__()->__max__;
  }

  inline const EnsensoConfig &EnsensoConfig::__getMin__()
  {
    return __get_statics__()->__min__;
  }

  inline const std::vector<EnsensoConfig::AbstractParamDescriptionConstPtr> &EnsensoConfig::__getParamDescriptions__()
  {
    return __get_statics__()->__param_descriptions__;
  }

  inline const std::vector<EnsensoConfig::AbstractGroupDescriptionConstPtr> &EnsensoConfig::__getGroupDescriptions__()
  {
    return __get_statics__()->__group_descriptions__;
  }

  inline const EnsensoConfigStatics *EnsensoConfig::__get_statics__()
  {
    const static EnsensoConfigStatics *statics;

    if (statics) // Common case
      return statics;

    boost::mutex::scoped_lock lock(dynamic_reconfigure::__init_mutex__);

    if (statics) // In case we lost a race.
      return statics;

    statics = EnsensoConfigStatics::get_instance();

    return statics;
  }

//#line 41 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Ensenso.cfg"
      const int Ensenso_Software = 0;
//#line 42 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Ensenso.cfg"
      const int Ensenso_FallingEdge = 1;
//#line 43 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Ensenso.cfg"
      const int Ensenso_RisingEdge = 2;
//#line 57 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Ensenso.cfg"
      const int Ensenso_Aligned = 0;
//#line 58 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Ensenso.cfg"
      const int Ensenso_Diagonal = 1;
//#line 59 "/home/resps/rovi2/Rovi2/src/caros/hwcomponents/caros_camera/cfg/Ensenso.cfg"
      const int Ensenso_AlignedAndDiagonal = 2;
}

#endif // __ENSENSORECONFIGURATOR_H__
