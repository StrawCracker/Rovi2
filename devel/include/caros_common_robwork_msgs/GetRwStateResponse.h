// Generated by gencpp from file caros_common_robwork_msgs/GetRwStateResponse.msg
// DO NOT EDIT!


#ifndef CAROS_COMMON_ROBWORK_MSGS_MESSAGE_GETRWSTATERESPONSE_H
#define CAROS_COMMON_ROBWORK_MSGS_MESSAGE_GETRWSTATERESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <caros_common_robwork_msgs/RwState.h>

namespace caros_common_robwork_msgs
{
template <class ContainerAllocator>
struct GetRwStateResponse_
{
  typedef GetRwStateResponse_<ContainerAllocator> Type;

  GetRwStateResponse_()
    : state()  {
    }
  GetRwStateResponse_(const ContainerAllocator& _alloc)
    : state(_alloc)  {
  (void)_alloc;
    }



   typedef  ::caros_common_robwork_msgs::RwState_<ContainerAllocator>  _state_type;
  _state_type state;





  typedef boost::shared_ptr< ::caros_common_robwork_msgs::GetRwStateResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::caros_common_robwork_msgs::GetRwStateResponse_<ContainerAllocator> const> ConstPtr;

}; // struct GetRwStateResponse_

typedef ::caros_common_robwork_msgs::GetRwStateResponse_<std::allocator<void> > GetRwStateResponse;

typedef boost::shared_ptr< ::caros_common_robwork_msgs::GetRwStateResponse > GetRwStateResponsePtr;
typedef boost::shared_ptr< ::caros_common_robwork_msgs::GetRwStateResponse const> GetRwStateResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::caros_common_robwork_msgs::GetRwStateResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::caros_common_robwork_msgs::GetRwStateResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace caros_common_robwork_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'caros_common_robwork_msgs': ['/home/resps/rovi2/Rovi2/src/caros/core/caros_common_robwork_msgs/msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::caros_common_robwork_msgs::GetRwStateResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::caros_common_robwork_msgs::GetRwStateResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::caros_common_robwork_msgs::GetRwStateResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::caros_common_robwork_msgs::GetRwStateResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::caros_common_robwork_msgs::GetRwStateResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::caros_common_robwork_msgs::GetRwStateResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::caros_common_robwork_msgs::GetRwStateResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ec5f59bcd9871c158266b6d4f91ec6c6";
  }

  static const char* value(const ::caros_common_robwork_msgs::GetRwStateResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xec5f59bcd9871c15ULL;
  static const uint64_t static_value2 = 0x8266b6d4f91ec6c6ULL;
};

template<class ContainerAllocator>
struct DataType< ::caros_common_robwork_msgs::GetRwStateResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "caros_common_robwork_msgs/GetRwStateResponse";
  }

  static const char* value(const ::caros_common_robwork_msgs::GetRwStateResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::caros_common_robwork_msgs::GetRwStateResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n\
caros_common_robwork_msgs/RwState state\n\
\n\
\n\
================================================================================\n\
MSG: caros_common_robwork_msgs/RwState\n\
# Serialization of RobWork state\n\
caros_common_robwork_msgs/RwStateData[] state_data\n\
\n\
================================================================================\n\
MSG: caros_common_robwork_msgs/RwStateData\n\
# Serialization of RobWork state data\n\
string name\n\
uint32 size\n\
uint8[] data\n\
";
  }

  static const char* value(const ::caros_common_robwork_msgs::GetRwStateResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::caros_common_robwork_msgs::GetRwStateResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.state);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GetRwStateResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::caros_common_robwork_msgs::GetRwStateResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::caros_common_robwork_msgs::GetRwStateResponse_<ContainerAllocator>& v)
  {
    s << indent << "state: ";
    s << std::endl;
    Printer< ::caros_common_robwork_msgs::RwState_<ContainerAllocator> >::stream(s, indent + "  ", v.state);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CAROS_COMMON_ROBWORK_MSGS_MESSAGE_GETRWSTATERESPONSE_H
