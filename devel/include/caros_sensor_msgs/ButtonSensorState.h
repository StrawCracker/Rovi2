// Generated by gencpp from file caros_sensor_msgs/ButtonSensorState.msg
// DO NOT EDIT!


#ifndef CAROS_SENSOR_MSGS_MESSAGE_BUTTONSENSORSTATE_H
#define CAROS_SENSOR_MSGS_MESSAGE_BUTTONSENSORSTATE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace caros_sensor_msgs
{
template <class ContainerAllocator>
struct ButtonSensorState_
{
  typedef ButtonSensorState_<ContainerAllocator> Type;

  ButtonSensorState_()
    : header()
    , digital()
    , digital_ids()
    , analog()
    , analog_ids()  {
    }
  ButtonSensorState_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , digital(_alloc)
    , digital_ids(_alloc)
    , analog(_alloc)
    , analog_ids(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  _digital_type;
  _digital_type digital;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _digital_ids_type;
  _digital_ids_type digital_ids;

   typedef std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  _analog_type;
  _analog_type analog;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _analog_ids_type;
  _analog_ids_type analog_ids;





  typedef boost::shared_ptr< ::caros_sensor_msgs::ButtonSensorState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::caros_sensor_msgs::ButtonSensorState_<ContainerAllocator> const> ConstPtr;

}; // struct ButtonSensorState_

typedef ::caros_sensor_msgs::ButtonSensorState_<std::allocator<void> > ButtonSensorState;

typedef boost::shared_ptr< ::caros_sensor_msgs::ButtonSensorState > ButtonSensorStatePtr;
typedef boost::shared_ptr< ::caros_sensor_msgs::ButtonSensorState const> ButtonSensorStateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::caros_sensor_msgs::ButtonSensorState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::caros_sensor_msgs::ButtonSensorState_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace caros_sensor_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'caros_common_msgs': ['/home/resps/rovi2/Rovi2/src/caros/core/caros_common_msgs/msg'], 'caros_sensor_msgs': ['/home/resps/rovi2/Rovi2/src/caros/interfaces/caros_sensor_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::caros_sensor_msgs::ButtonSensorState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::caros_sensor_msgs::ButtonSensorState_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::caros_sensor_msgs::ButtonSensorState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::caros_sensor_msgs::ButtonSensorState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::caros_sensor_msgs::ButtonSensorState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::caros_sensor_msgs::ButtonSensorState_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::caros_sensor_msgs::ButtonSensorState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cbc246135ff6dad08335b5ff9b905da1";
  }

  static const char* value(const ::caros_sensor_msgs::ButtonSensorState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xcbc246135ff6dad0ULL;
  static const uint64_t static_value2 = 0x8335b5ff9b905da1ULL;
};

template<class ContainerAllocator>
struct DataType< ::caros_sensor_msgs::ButtonSensorState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "caros_sensor_msgs/ButtonSensorState";
  }

  static const char* value(const ::caros_sensor_msgs::ButtonSensorState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::caros_sensor_msgs::ButtonSensorState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Represents the state of a set of analog and digital buttons.\n\
\n\
# Header containing information about time and frameid\n\
Header header\n\
\n\
# Array of bools for digital buttons\n\
bool[] digital\n\
\n\
# IDs for the digital buttons\n\
string[] digital_ids\n\
\n\
# Array of values for analog buttons\n\
bool[] analog\n\
\n\
# IDs for the analog buttons\n\
string[] analog_ids\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
";
  }

  static const char* value(const ::caros_sensor_msgs::ButtonSensorState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::caros_sensor_msgs::ButtonSensorState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.digital);
      stream.next(m.digital_ids);
      stream.next(m.analog);
      stream.next(m.analog_ids);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ButtonSensorState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::caros_sensor_msgs::ButtonSensorState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::caros_sensor_msgs::ButtonSensorState_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "digital[]" << std::endl;
    for (size_t i = 0; i < v.digital.size(); ++i)
    {
      s << indent << "  digital[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.digital[i]);
    }
    s << indent << "digital_ids[]" << std::endl;
    for (size_t i = 0; i < v.digital_ids.size(); ++i)
    {
      s << indent << "  digital_ids[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.digital_ids[i]);
    }
    s << indent << "analog[]" << std::endl;
    for (size_t i = 0; i < v.analog.size(); ++i)
    {
      s << indent << "  analog[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.analog[i]);
    }
    s << indent << "analog_ids[]" << std::endl;
    for (size_t i = 0; i < v.analog_ids.size(); ++i)
    {
      s << indent << "  analog_ids[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.analog_ids[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // CAROS_SENSOR_MSGS_MESSAGE_BUTTONSENSORSTATE_H
