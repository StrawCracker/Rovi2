// Generated by gencpp from file caros_common_msgs/CarosNodeState.msg
// DO NOT EDIT!


#ifndef CAROS_COMMON_MSGS_MESSAGE_CAROSNODESTATE_H
#define CAROS_COMMON_MSGS_MESSAGE_CAROSNODESTATE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace caros_common_msgs
{
template <class ContainerAllocator>
struct CarosNodeState_
{
  typedef CarosNodeState_<ContainerAllocator> Type;

  CarosNodeState_()
    : state()
    , inError(false)
    , error_msg()
    , error_code(0)
    , changed_event(false)
    , previous_state()  {
    }
  CarosNodeState_(const ContainerAllocator& _alloc)
    : state(_alloc)
    , inError(false)
    , error_msg(_alloc)
    , error_code(0)
    , changed_event(false)
    , previous_state(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _state_type;
  _state_type state;

   typedef uint8_t _inError_type;
  _inError_type inError;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _error_msg_type;
  _error_msg_type error_msg;

   typedef int64_t _error_code_type;
  _error_code_type error_code;

   typedef uint8_t _changed_event_type;
  _changed_event_type changed_event;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _previous_state_type;
  _previous_state_type previous_state;





  typedef boost::shared_ptr< ::caros_common_msgs::CarosNodeState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::caros_common_msgs::CarosNodeState_<ContainerAllocator> const> ConstPtr;

}; // struct CarosNodeState_

typedef ::caros_common_msgs::CarosNodeState_<std::allocator<void> > CarosNodeState;

typedef boost::shared_ptr< ::caros_common_msgs::CarosNodeState > CarosNodeStatePtr;
typedef boost::shared_ptr< ::caros_common_msgs::CarosNodeState const> CarosNodeStateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::caros_common_msgs::CarosNodeState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::caros_common_msgs::CarosNodeState_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace caros_common_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'caros_common_msgs': ['/home/resps/rovi2/Rovi2/src/caros/core/caros_common_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::caros_common_msgs::CarosNodeState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::caros_common_msgs::CarosNodeState_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::caros_common_msgs::CarosNodeState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::caros_common_msgs::CarosNodeState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::caros_common_msgs::CarosNodeState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::caros_common_msgs::CarosNodeState_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::caros_common_msgs::CarosNodeState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "90a49c4f7cb1b4f048d2e3a9d6bcc097";
  }

  static const char* value(const ::caros_common_msgs::CarosNodeState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x90a49c4f7cb1b4f0ULL;
  static const uint64_t static_value2 = 0x48d2e3a9d6bcc097ULL;
};

template<class ContainerAllocator>
struct DataType< ::caros_common_msgs::CarosNodeState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "caros_common_msgs/CarosNodeState";
  }

  static const char* value(const ::caros_common_msgs::CarosNodeState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::caros_common_msgs::CarosNodeState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# state of node (INIT,STOPPED,RUNNING,ERROR,FATALERROR)\n\
string state\n\
\n\
bool inError\n\
string error_msg\n\
int64 error_code\n\
\n\
# true if\n\
bool changed_event\n\
string previous_state\n\
";
  }

  static const char* value(const ::caros_common_msgs::CarosNodeState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::caros_common_msgs::CarosNodeState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.state);
      stream.next(m.inError);
      stream.next(m.error_msg);
      stream.next(m.error_code);
      stream.next(m.changed_event);
      stream.next(m.previous_state);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CarosNodeState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::caros_common_msgs::CarosNodeState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::caros_common_msgs::CarosNodeState_<ContainerAllocator>& v)
  {
    s << indent << "state: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.state);
    s << indent << "inError: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.inError);
    s << indent << "error_msg: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.error_msg);
    s << indent << "error_code: ";
    Printer<int64_t>::stream(s, indent + "  ", v.error_code);
    s << indent << "changed_event: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.changed_event);
    s << indent << "previous_state: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.previous_state);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CAROS_COMMON_MSGS_MESSAGE_CAROSNODESTATE_H
