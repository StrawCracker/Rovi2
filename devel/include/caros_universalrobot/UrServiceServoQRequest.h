// Generated by gencpp from file caros_universalrobot/UrServiceServoQRequest.msg
// DO NOT EDIT!


#ifndef CAROS_UNIVERSALROBOT_MESSAGE_URSERVICESERVOQREQUEST_H
#define CAROS_UNIVERSALROBOT_MESSAGE_URSERVICESERVOQREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <caros_common_msgs/Q.h>

namespace caros_universalrobot
{
template <class ContainerAllocator>
struct UrServiceServoQRequest_
{
  typedef UrServiceServoQRequest_<ContainerAllocator> Type;

  UrServiceServoQRequest_()
    : target()  {
    }
  UrServiceServoQRequest_(const ContainerAllocator& _alloc)
    : target(_alloc)  {
  (void)_alloc;
    }



   typedef  ::caros_common_msgs::Q_<ContainerAllocator>  _target_type;
  _target_type target;





  typedef boost::shared_ptr< ::caros_universalrobot::UrServiceServoQRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::caros_universalrobot::UrServiceServoQRequest_<ContainerAllocator> const> ConstPtr;

}; // struct UrServiceServoQRequest_

typedef ::caros_universalrobot::UrServiceServoQRequest_<std::allocator<void> > UrServiceServoQRequest;

typedef boost::shared_ptr< ::caros_universalrobot::UrServiceServoQRequest > UrServiceServoQRequestPtr;
typedef boost::shared_ptr< ::caros_universalrobot::UrServiceServoQRequest const> UrServiceServoQRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::caros_universalrobot::UrServiceServoQRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::caros_universalrobot::UrServiceServoQRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace caros_universalrobot

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'caros_common_msgs': ['/home/resps/rovi2/Rovi2/src/caros/core/caros_common_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::caros_universalrobot::UrServiceServoQRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::caros_universalrobot::UrServiceServoQRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::caros_universalrobot::UrServiceServoQRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::caros_universalrobot::UrServiceServoQRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::caros_universalrobot::UrServiceServoQRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::caros_universalrobot::UrServiceServoQRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::caros_universalrobot::UrServiceServoQRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6fee4539b1a475fe2318780ffcddb855";
  }

  static const char* value(const ::caros_universalrobot::UrServiceServoQRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6fee4539b1a475feULL;
  static const uint64_t static_value2 = 0x2318780ffcddb855ULL;
};

template<class ContainerAllocator>
struct DataType< ::caros_universalrobot::UrServiceServoQRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "caros_universalrobot/UrServiceServoQRequest";
  }

  static const char* value(const ::caros_universalrobot::UrServiceServoQRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::caros_universalrobot::UrServiceServoQRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n\
caros_common_msgs/Q target\n\
\n\
\n\
================================================================================\n\
MSG: caros_common_msgs/Q\n\
# A configuration Q\n\
float64[] data\n\
";
  }

  static const char* value(const ::caros_universalrobot::UrServiceServoQRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::caros_universalrobot::UrServiceServoQRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.target);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct UrServiceServoQRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::caros_universalrobot::UrServiceServoQRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::caros_universalrobot::UrServiceServoQRequest_<ContainerAllocator>& v)
  {
    s << indent << "target: ";
    s << std::endl;
    Printer< ::caros_common_msgs::Q_<ContainerAllocator> >::stream(s, indent + "  ", v.target);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CAROS_UNIVERSALROBOT_MESSAGE_URSERVICESERVOQREQUEST_H
